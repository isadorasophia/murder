/*             |￣￣￣￣￣￣\                                                                  *
 *             |    STOP   |                                                                 *
 *             |   EDITING |                                                                 *
 *             |    THIS   |                                                                 *
 *             |    FILE   |                                                                 *
 *             | ＿＿＿＿＿ /                                                                 *
 *             (\__/)  ||                                                                    *
 *             (•ㅅ•)  ||                                                                    *
 *             / 　 づ                                                                       *
 *             ￣￣￣                                                                         *
 * This code was generated by our own generator! In order to modify this, please run the     *
 * generator with whatever settings you want.                                                *
 *                                                                                           */

using Murder.Components;
using Murder.Components.Agents;
using Murder.Components.Cutscenes;
using Murder.Components.Serialization;
using Murder.Components.Effects;
using Bang.Interactions;
using Murder.Components.Graphics;
using Bang.StateMachines;
using Bang.Components;
using Murder.StateMachines;
using Murder.Interactions;
using Murder.Messages;
using Murder.Core.Graphics;
using Road.Messages;
using Murder.Messages.Physics;
using System.Collections.Immutable;

namespace Bang.Entities
{
    public enum MurderComponentType
    {
        AdvancedCollision = 0,
        Agent = 1,
        AgentImpulse = 2,
        AgentSpeedMultiplier = 3,
        AgentSpeedOverride = 4,
        AgentSprite = 5,
        Alpha = 6,
        AnimationComplete = 7,
        AnimationEventBroadcaster = 8,
        AnimationOverload = 9,
        AnimationSpeedOverload = 10,
        AttackMultiplier = 11,
        CameraFollow = 12,
        Carve = 13,
        Choice = 14,
        Collider = 15,
        CollisionCache = 16,
        CustomCollisionMask = 17,
        CustomDraw = 18,
        CustomTargetSpriteBatch = 19,
        CutsceneAnchors = 20,
        CutsceneAnchorsEditor = 21,
        DestroyAtTime = 22,
        DestroyOnAnimationComplete = 23,
        DestroyOnBlackboardCondition = 24,
        DestroyOnCollision = 25,
        DisableAgent = 26,
        DisableEntity = 27,
        DisableParticleSystem = 28,
        DisableSceneTransitionEffects = 29,
        DoNotPause = 30,
        DoNotPersistEntityOnSave = 31,
        DrawRectangle = 32,
        EntityTracker = 33,
        EventListener = 34,
        EventListenerEditor = 35,
        Facing = 36,
        FadeScreen = 37,
        FadeTransition = 38,
        FadeWhenInArea = 39,
        FadeWhenInCutscene = 40,
        FlashSprite = 41,
        FreeMovement = 42,
        FreezeWorld = 43,
        Friction = 44,
        GlobalShader = 45,
        GuidToIdTargetCollection = 46,
        GuidToIdTarget = 47,
        HAAStarPathfind = 48,
        HasVision = 49,
        HighlightOnChildren = 50,
        HighlightSprite = 51,
        IdTargetCollection = 52,
        IdTarget = 53,
        IgnoreTriggersUntil = 54,
        InCamera = 55,
        Indestructible = 56,
        InstanceToEntityLookup = 57,
        InteractOnCollision = 58,
        InteractOnRuleMatchCollection = 59,
        InteractOnRuleMatch = 60,
        InteractOnStart = 61,
        Interactor = 62,
        Line = 63,
        Map = 64,
        MoveTo = 65,
        MoveToPerfect = 66,
        Music = 67,
        NineSlice = 68,
        OnEnterOnExit = 69,
        Parallax = 70,
        ParticleSystem = 71,
        ParticleSystemWorldTracker = 72,
        Pathfind = 73,
        PauseAnimation = 74,
        PickEntityToAddOnStart = 75,
        PolygonSprite = 76,
        PrefabRef = 77,
        PushAway = 78,
        Quadtree = 79,
        QuestTracker = 80,
        QuestTrackerRuntime = 81,
        RandomizeSprite = 82,
        RectPosition = 83,
        Reflection = 84,
        RemoveColliderWhenStopped = 85,
        RemoveEntityOnRuleMatchAtLoad = 86,
        RequiresVision = 87,
        Room = 88,
        Rotate = 89,
        Route = 90,
        RuleWatcher = 91,
        Situation = 92,
        Sound = 93,
        SoundParameter = 94,
        SoundWatcher = 95,
        Speaker = 96,
        Sprite = 97,
        Static = 98,
        Strafing = 99,
        TextBox = 100,
        Texture = 101,
        ThreeSlice = 102,
        TileGrid = 103,
        Tileset = 104,
        Tint = 105,
        UiDisplay = 106,
        Velocity = 107,
        VerticalPosition = 108,
        WaitForVacancy = 109,
        WindowRefreshTracker = 110,
        StateMachine = 111,
        Interactive = 112,
        Transform = 113,
        TransformBase = 113
    }

    public enum MurderMessageType
    {
        AnimationComplete = 114,
        AnimationEvent = 115,
        CollidedWith = 116,
        FatalDamage = 117,
        Highlight = 118,
        Interact = 119,
        Interactor = 120,
        IsInsideOf = 121,
        NextDialog = 122,
        OnActorEnteredOrExited = 123,
        OnInteractExit = 124,
        OnTriggerEntered = 125,
        PathNotPossible = 126,
        PickChoice = 127,
        TouchedGround = 128
    }

    public static class MurderEntityExtensions
    {
        #region Component "Get" methods!
        public static AdvancedCollisionComponent GetAdvancedCollision(this Entity e)
        {
            return e.GetComponent<AdvancedCollisionComponent>(0);
        }

        public static AgentComponent GetAgent(this Entity e)
        {
            return e.GetComponent<AgentComponent>(1);
        }

        public static AgentImpulseComponent GetAgentImpulse(this Entity e)
        {
            return e.GetComponent<AgentImpulseComponent>(2);
        }

        public static AgentSpeedMultiplier GetAgentSpeedMultiplier(this Entity e)
        {
            return e.GetComponent<AgentSpeedMultiplier>(3);
        }

        public static AgentSpeedOverride GetAgentSpeedOverride(this Entity e)
        {
            return e.GetComponent<AgentSpeedOverride>(4);
        }

        public static AgentSpriteComponent GetAgentSprite(this Entity e)
        {
            return e.GetComponent<AgentSpriteComponent>(5);
        }

        public static AlphaComponent GetAlpha(this Entity e)
        {
            return e.GetComponent<AlphaComponent>(6);
        }

        public static AnimationCompleteComponent GetAnimationComplete(this Entity e)
        {
            return e.GetComponent<AnimationCompleteComponent>(7);
        }

        public static AnimationEventBroadcasterComponent GetAnimationEventBroadcaster(this Entity e)
        {
            return e.GetComponent<AnimationEventBroadcasterComponent>(8);
        }

        public static AnimationOverloadComponent GetAnimationOverload(this Entity e)
        {
            return e.GetComponent<AnimationOverloadComponent>(9);
        }

        public static AnimationSpeedOverload GetAnimationSpeedOverload(this Entity e)
        {
            return e.GetComponent<AnimationSpeedOverload>(10);
        }

        public static AttackMultiplier GetAttackMultiplier(this Entity e)
        {
            return e.GetComponent<AttackMultiplier>(11);
        }

        public static CameraFollowComponent GetCameraFollow(this Entity e)
        {
            return e.GetComponent<CameraFollowComponent>(12);
        }

        public static CarveComponent GetCarve(this Entity e)
        {
            return e.GetComponent<CarveComponent>(13);
        }

        public static ChoiceComponent GetChoice(this Entity e)
        {
            return e.GetComponent<ChoiceComponent>(14);
        }

        public static ColliderComponent GetCollider(this Entity e)
        {
            return e.GetComponent<ColliderComponent>(15);
        }

        public static CollisionCacheComponent GetCollisionCache(this Entity e)
        {
            return e.GetComponent<CollisionCacheComponent>(16);
        }

        public static CustomCollisionMask GetCustomCollisionMask(this Entity e)
        {
            return e.GetComponent<CustomCollisionMask>(17);
        }

        public static CustomDrawComponent GetCustomDraw(this Entity e)
        {
            return e.GetComponent<CustomDrawComponent>(18);
        }

        public static CustomTargetSpriteBatchComponent GetCustomTargetSpriteBatch(this Entity e)
        {
            return e.GetComponent<CustomTargetSpriteBatchComponent>(19);
        }

        public static CutsceneAnchorsComponent GetCutsceneAnchors(this Entity e)
        {
            return e.GetComponent<CutsceneAnchorsComponent>(20);
        }

        public static CutsceneAnchorsEditorComponent GetCutsceneAnchorsEditor(this Entity e)
        {
            return e.GetComponent<CutsceneAnchorsEditorComponent>(21);
        }

        public static DestroyAtTimeComponent GetDestroyAtTime(this Entity e)
        {
            return e.GetComponent<DestroyAtTimeComponent>(22);
        }

        public static DestroyOnAnimationCompleteComponent GetDestroyOnAnimationComplete(this Entity e)
        {
            return e.GetComponent<DestroyOnAnimationCompleteComponent>(23);
        }

        public static DestroyOnBlackboardConditionComponent GetDestroyOnBlackboardCondition(this Entity e)
        {
            return e.GetComponent<DestroyOnBlackboardConditionComponent>(24);
        }

        public static DestroyOnCollisionComponent GetDestroyOnCollision(this Entity e)
        {
            return e.GetComponent<DestroyOnCollisionComponent>(25);
        }

        public static DisableAgentComponent GetDisableAgent(this Entity e)
        {
            return e.GetComponent<DisableAgentComponent>(26);
        }

        public static DisableEntityComponent GetDisableEntity(this Entity e)
        {
            return e.GetComponent<DisableEntityComponent>(27);
        }

        public static DisableParticleSystemComponent GetDisableParticleSystem(this Entity e)
        {
            return e.GetComponent<DisableParticleSystemComponent>(28);
        }

        public static DisableSceneTransitionEffectsComponent GetDisableSceneTransitionEffects(this Entity e)
        {
            return e.GetComponent<DisableSceneTransitionEffectsComponent>(29);
        }

        public static DoNotPauseComponent GetDoNotPause(this Entity e)
        {
            return e.GetComponent<DoNotPauseComponent>(30);
        }

        public static DoNotPersistEntityOnSaveComponent GetDoNotPersistEntityOnSave(this Entity e)
        {
            return e.GetComponent<DoNotPersistEntityOnSaveComponent>(31);
        }

        public static DrawRectangleComponent GetDrawRectangle(this Entity e)
        {
            return e.GetComponent<DrawRectangleComponent>(32);
        }

        public static EntityTrackerComponent GetEntityTracker(this Entity e)
        {
            return e.GetComponent<EntityTrackerComponent>(33);
        }

        public static EventListenerComponent GetEventListener(this Entity e)
        {
            return e.GetComponent<EventListenerComponent>(34);
        }

        public static EventListenerEditorComponent GetEventListenerEditor(this Entity e)
        {
            return e.GetComponent<EventListenerEditorComponent>(35);
        }

        public static FacingComponent GetFacing(this Entity e)
        {
            return e.GetComponent<FacingComponent>(36);
        }

        public static FadeScreenComponent GetFadeScreen(this Entity e)
        {
            return e.GetComponent<FadeScreenComponent>(37);
        }

        public static FadeTransitionComponent GetFadeTransition(this Entity e)
        {
            return e.GetComponent<FadeTransitionComponent>(38);
        }

        public static FadeWhenInAreaComponent GetFadeWhenInArea(this Entity e)
        {
            return e.GetComponent<FadeWhenInAreaComponent>(39);
        }

        public static FadeWhenInCutsceneComponent GetFadeWhenInCutscene(this Entity e)
        {
            return e.GetComponent<FadeWhenInCutsceneComponent>(40);
        }

        public static FlashSpriteComponent GetFlashSprite(this Entity e)
        {
            return e.GetComponent<FlashSpriteComponent>(41);
        }

        public static FreeMovementComponent GetFreeMovement(this Entity e)
        {
            return e.GetComponent<FreeMovementComponent>(42);
        }

        public static FreezeWorldComponent GetFreezeWorld(this Entity e)
        {
            return e.GetComponent<FreezeWorldComponent>(43);
        }

        public static FrictionComponent GetFriction(this Entity e)
        {
            return e.GetComponent<FrictionComponent>(44);
        }

        public static GlobalShaderComponent GetGlobalShader(this Entity e)
        {
            return e.GetComponent<GlobalShaderComponent>(45);
        }

        public static GuidToIdTargetCollectionComponent GetGuidToIdTargetCollection(this Entity e)
        {
            return e.GetComponent<GuidToIdTargetCollectionComponent>(46);
        }

        public static GuidToIdTargetComponent GetGuidToIdTarget(this Entity e)
        {
            return e.GetComponent<GuidToIdTargetComponent>(47);
        }

        public static HAAStarPathfindComponent GetHAAStarPathfind(this Entity e)
        {
            return e.GetComponent<HAAStarPathfindComponent>(48);
        }

        public static HasVisionComponent GetHasVision(this Entity e)
        {
            return e.GetComponent<HasVisionComponent>(49);
        }

        public static HighlightOnChildrenComponent GetHighlightOnChildren(this Entity e)
        {
            return e.GetComponent<HighlightOnChildrenComponent>(50);
        }

        public static HighlightSpriteComponent GetHighlightSprite(this Entity e)
        {
            return e.GetComponent<HighlightSpriteComponent>(51);
        }

        public static IdTargetCollectionComponent GetIdTargetCollection(this Entity e)
        {
            return e.GetComponent<IdTargetCollectionComponent>(52);
        }

        public static IdTargetComponent GetIdTarget(this Entity e)
        {
            return e.GetComponent<IdTargetComponent>(53);
        }

        public static IgnoreTriggersUntilComponent GetIgnoreTriggersUntil(this Entity e)
        {
            return e.GetComponent<IgnoreTriggersUntilComponent>(54);
        }

        public static InCameraComponent GetInCamera(this Entity e)
        {
            return e.GetComponent<InCameraComponent>(55);
        }

        public static IndestructibleComponent GetIndestructible(this Entity e)
        {
            return e.GetComponent<IndestructibleComponent>(56);
        }

        public static InstanceToEntityLookupComponent GetInstanceToEntityLookup(this Entity e)
        {
            return e.GetComponent<InstanceToEntityLookupComponent>(57);
        }

        public static InteractOnCollisionComponent GetInteractOnCollision(this Entity e)
        {
            return e.GetComponent<InteractOnCollisionComponent>(58);
        }

        public static InteractOnRuleMatchCollectionComponent GetInteractOnRuleMatchCollection(this Entity e)
        {
            return e.GetComponent<InteractOnRuleMatchCollectionComponent>(59);
        }

        public static InteractOnRuleMatchComponent GetInteractOnRuleMatch(this Entity e)
        {
            return e.GetComponent<InteractOnRuleMatchComponent>(60);
        }

        public static InteractOnStartComponent GetInteractOnStart(this Entity e)
        {
            return e.GetComponent<InteractOnStartComponent>(61);
        }

        public static InteractorComponent GetInteractor(this Entity e)
        {
            return e.GetComponent<InteractorComponent>(62);
        }

        public static LineComponent GetLine(this Entity e)
        {
            return e.GetComponent<LineComponent>(63);
        }

        public static MapComponent GetMap(this Entity e)
        {
            return e.GetComponent<MapComponent>(64);
        }

        public static MoveToComponent GetMoveTo(this Entity e)
        {
            return e.GetComponent<MoveToComponent>(65);
        }

        public static MoveToPerfectComponent GetMoveToPerfect(this Entity e)
        {
            return e.GetComponent<MoveToPerfectComponent>(66);
        }

        public static MusicComponent GetMusic(this Entity e)
        {
            return e.GetComponent<MusicComponent>(67);
        }

        public static NineSliceComponent GetNineSlice(this Entity e)
        {
            return e.GetComponent<NineSliceComponent>(68);
        }

        public static OnEnterOnExitComponent GetOnEnterOnExit(this Entity e)
        {
            return e.GetComponent<OnEnterOnExitComponent>(69);
        }

        public static ParallaxComponent GetParallax(this Entity e)
        {
            return e.GetComponent<ParallaxComponent>(70);
        }

        public static ParticleSystemComponent GetParticleSystem(this Entity e)
        {
            return e.GetComponent<ParticleSystemComponent>(71);
        }

        public static ParticleSystemWorldTrackerComponent GetParticleSystemWorldTracker(this Entity e)
        {
            return e.GetComponent<ParticleSystemWorldTrackerComponent>(72);
        }

        public static PathfindComponent GetPathfind(this Entity e)
        {
            return e.GetComponent<PathfindComponent>(73);
        }

        public static PauseAnimationComponent GetPauseAnimation(this Entity e)
        {
            return e.GetComponent<PauseAnimationComponent>(74);
        }

        public static PickEntityToAddOnStartComponent GetPickEntityToAddOnStart(this Entity e)
        {
            return e.GetComponent<PickEntityToAddOnStartComponent>(75);
        }

        public static PolygonSpriteComponent GetPolygonSprite(this Entity e)
        {
            return e.GetComponent<PolygonSpriteComponent>(76);
        }

        public static PrefabRefComponent GetPrefabRef(this Entity e)
        {
            return e.GetComponent<PrefabRefComponent>(77);
        }

        public static PushAwayComponent GetPushAway(this Entity e)
        {
            return e.GetComponent<PushAwayComponent>(78);
        }

        public static QuadtreeComponent GetQuadtree(this Entity e)
        {
            return e.GetComponent<QuadtreeComponent>(79);
        }

        public static QuestTrackerComponent GetQuestTracker(this Entity e)
        {
            return e.GetComponent<QuestTrackerComponent>(80);
        }

        public static QuestTrackerRuntimeComponent GetQuestTrackerRuntime(this Entity e)
        {
            return e.GetComponent<QuestTrackerRuntimeComponent>(81);
        }

        public static RandomizeSpriteComponent GetRandomizeSprite(this Entity e)
        {
            return e.GetComponent<RandomizeSpriteComponent>(82);
        }

        public static RectPositionComponent GetRectPosition(this Entity e)
        {
            return e.GetComponent<RectPositionComponent>(83);
        }

        public static ReflectionComponent GetReflection(this Entity e)
        {
            return e.GetComponent<ReflectionComponent>(84);
        }

        public static RemoveColliderWhenStoppedComponent GetRemoveColliderWhenStopped(this Entity e)
        {
            return e.GetComponent<RemoveColliderWhenStoppedComponent>(85);
        }

        public static RemoveEntityOnRuleMatchAtLoadComponent GetRemoveEntityOnRuleMatchAtLoad(this Entity e)
        {
            return e.GetComponent<RemoveEntityOnRuleMatchAtLoadComponent>(86);
        }

        public static RequiresVisionComponent GetRequiresVision(this Entity e)
        {
            return e.GetComponent<RequiresVisionComponent>(87);
        }

        public static RoomComponent GetRoom(this Entity e)
        {
            return e.GetComponent<RoomComponent>(88);
        }

        public static RotateComponent GetRotate(this Entity e)
        {
            return e.GetComponent<RotateComponent>(89);
        }

        public static RouteComponent GetRoute(this Entity e)
        {
            return e.GetComponent<RouteComponent>(90);
        }

        public static RuleWatcherComponent GetRuleWatcher(this Entity e)
        {
            return e.GetComponent<RuleWatcherComponent>(91);
        }

        public static SituationComponent GetSituation(this Entity e)
        {
            return e.GetComponent<SituationComponent>(92);
        }

        public static SoundComponent GetSound(this Entity e)
        {
            return e.GetComponent<SoundComponent>(93);
        }

        public static SoundParameterComponent GetSoundParameter(this Entity e)
        {
            return e.GetComponent<SoundParameterComponent>(94);
        }

        public static SoundWatcherComponent GetSoundWatcher(this Entity e)
        {
            return e.GetComponent<SoundWatcherComponent>(95);
        }

        public static SpeakerComponent GetSpeaker(this Entity e)
        {
            return e.GetComponent<SpeakerComponent>(96);
        }

        public static SpriteComponent GetSprite(this Entity e)
        {
            return e.GetComponent<SpriteComponent>(97);
        }

        public static StaticComponent GetStatic(this Entity e)
        {
            return e.GetComponent<StaticComponent>(98);
        }

        public static StrafingComponent GetStrafing(this Entity e)
        {
            return e.GetComponent<StrafingComponent>(99);
        }

        public static TextBoxComponent GetTextBox(this Entity e)
        {
            return e.GetComponent<TextBoxComponent>(100);
        }

        public static TextureComponent GetTexture(this Entity e)
        {
            return e.GetComponent<TextureComponent>(101);
        }

        public static ThreeSliceComponent GetThreeSlice(this Entity e)
        {
            return e.GetComponent<ThreeSliceComponent>(102);
        }

        public static TileGridComponent GetTileGrid(this Entity e)
        {
            return e.GetComponent<TileGridComponent>(103);
        }

        public static TilesetComponent GetTileset(this Entity e)
        {
            return e.GetComponent<TilesetComponent>(104);
        }

        public static TintComponent GetTint(this Entity e)
        {
            return e.GetComponent<TintComponent>(105);
        }

        public static UiDisplayComponent GetUiDisplay(this Entity e)
        {
            return e.GetComponent<UiDisplayComponent>(106);
        }

        public static VelocityComponent GetVelocity(this Entity e)
        {
            return e.GetComponent<VelocityComponent>(107);
        }

        public static VerticalPositionComponent GetVerticalPosition(this Entity e)
        {
            return e.GetComponent<VerticalPositionComponent>(108);
        }

        public static WaitForVacancyComponent GetWaitForVacancy(this Entity e)
        {
            return e.GetComponent<WaitForVacancyComponent>(109);
        }

        public static WindowRefreshTrackerComponent GetWindowRefreshTracker(this Entity e)
        {
            return e.GetComponent<WindowRefreshTrackerComponent>(110);
        }

        public static IStateMachineComponent GetStateMachine(this Entity e)
        {
            return e.GetComponent<IStateMachineComponent>(111);
        }

        public static IInteractiveComponent GetInteractive(this Entity e)
        {
            return e.GetComponent<IInteractiveComponent>(112);
        }

        public static IMurderTransformComponent GetTransform(this Entity e)
        {
            return e.GetComponent<IMurderTransformComponent>(113);
        }

        public static ITransformComponent GetTransformBase(this Entity e)
        {
            return e.GetComponent<ITransformComponent>(113);
        }
        #endregion
        
        #region Component "Has" checkers!
        public static bool HasAdvancedCollision(this Entity e)
        {
            return e.HasComponent(0);
        }

        public static bool HasAgent(this Entity e)
        {
            return e.HasComponent(1);
        }

        public static bool HasAgentImpulse(this Entity e)
        {
            return e.HasComponent(2);
        }

        public static bool HasAgentSpeedMultiplier(this Entity e)
        {
            return e.HasComponent(3);
        }

        public static bool HasAgentSpeedOverride(this Entity e)
        {
            return e.HasComponent(4);
        }

        public static bool HasAgentSprite(this Entity e)
        {
            return e.HasComponent(5);
        }

        public static bool HasAlpha(this Entity e)
        {
            return e.HasComponent(6);
        }

        public static bool HasAnimationComplete(this Entity e)
        {
            return e.HasComponent(7);
        }

        public static bool HasAnimationEventBroadcaster(this Entity e)
        {
            return e.HasComponent(8);
        }

        public static bool HasAnimationOverload(this Entity e)
        {
            return e.HasComponent(9);
        }

        public static bool HasAnimationSpeedOverload(this Entity e)
        {
            return e.HasComponent(10);
        }

        public static bool HasAttackMultiplier(this Entity e)
        {
            return e.HasComponent(11);
        }

        public static bool HasCameraFollow(this Entity e)
        {
            return e.HasComponent(12);
        }

        public static bool HasCarve(this Entity e)
        {
            return e.HasComponent(13);
        }

        public static bool HasChoice(this Entity e)
        {
            return e.HasComponent(14);
        }

        public static bool HasCollider(this Entity e)
        {
            return e.HasComponent(15);
        }

        public static bool HasCollisionCache(this Entity e)
        {
            return e.HasComponent(16);
        }

        public static bool HasCustomCollisionMask(this Entity e)
        {
            return e.HasComponent(17);
        }

        public static bool HasCustomDraw(this Entity e)
        {
            return e.HasComponent(18);
        }

        public static bool HasCustomTargetSpriteBatch(this Entity e)
        {
            return e.HasComponent(19);
        }

        public static bool HasCutsceneAnchors(this Entity e)
        {
            return e.HasComponent(20);
        }

        public static bool HasCutsceneAnchorsEditor(this Entity e)
        {
            return e.HasComponent(21);
        }

        public static bool HasDestroyAtTime(this Entity e)
        {
            return e.HasComponent(22);
        }

        public static bool HasDestroyOnAnimationComplete(this Entity e)
        {
            return e.HasComponent(23);
        }

        public static bool HasDestroyOnBlackboardCondition(this Entity e)
        {
            return e.HasComponent(24);
        }

        public static bool HasDestroyOnCollision(this Entity e)
        {
            return e.HasComponent(25);
        }

        public static bool HasDisableAgent(this Entity e)
        {
            return e.HasComponent(26);
        }

        public static bool HasDisableEntity(this Entity e)
        {
            return e.HasComponent(27);
        }

        public static bool HasDisableParticleSystem(this Entity e)
        {
            return e.HasComponent(28);
        }

        public static bool HasDisableSceneTransitionEffects(this Entity e)
        {
            return e.HasComponent(29);
        }

        public static bool HasDoNotPause(this Entity e)
        {
            return e.HasComponent(30);
        }

        public static bool HasDoNotPersistEntityOnSave(this Entity e)
        {
            return e.HasComponent(31);
        }

        public static bool HasDrawRectangle(this Entity e)
        {
            return e.HasComponent(32);
        }

        public static bool HasEntityTracker(this Entity e)
        {
            return e.HasComponent(33);
        }

        public static bool HasEventListener(this Entity e)
        {
            return e.HasComponent(34);
        }

        public static bool HasEventListenerEditor(this Entity e)
        {
            return e.HasComponent(35);
        }

        public static bool HasFacing(this Entity e)
        {
            return e.HasComponent(36);
        }

        public static bool HasFadeScreen(this Entity e)
        {
            return e.HasComponent(37);
        }

        public static bool HasFadeTransition(this Entity e)
        {
            return e.HasComponent(38);
        }

        public static bool HasFadeWhenInArea(this Entity e)
        {
            return e.HasComponent(39);
        }

        public static bool HasFadeWhenInCutscene(this Entity e)
        {
            return e.HasComponent(40);
        }

        public static bool HasFlashSprite(this Entity e)
        {
            return e.HasComponent(41);
        }

        public static bool HasFreeMovement(this Entity e)
        {
            return e.HasComponent(42);
        }

        public static bool HasFreezeWorld(this Entity e)
        {
            return e.HasComponent(43);
        }

        public static bool HasFriction(this Entity e)
        {
            return e.HasComponent(44);
        }

        public static bool HasGlobalShader(this Entity e)
        {
            return e.HasComponent(45);
        }

        public static bool HasGuidToIdTargetCollection(this Entity e)
        {
            return e.HasComponent(46);
        }

        public static bool HasGuidToIdTarget(this Entity e)
        {
            return e.HasComponent(47);
        }

        public static bool HasHAAStarPathfind(this Entity e)
        {
            return e.HasComponent(48);
        }

        public static bool HasHasVision(this Entity e)
        {
            return e.HasComponent(49);
        }

        public static bool HasHighlightOnChildren(this Entity e)
        {
            return e.HasComponent(50);
        }

        public static bool HasHighlightSprite(this Entity e)
        {
            return e.HasComponent(51);
        }

        public static bool HasIdTargetCollection(this Entity e)
        {
            return e.HasComponent(52);
        }

        public static bool HasIdTarget(this Entity e)
        {
            return e.HasComponent(53);
        }

        public static bool HasIgnoreTriggersUntil(this Entity e)
        {
            return e.HasComponent(54);
        }

        public static bool HasInCamera(this Entity e)
        {
            return e.HasComponent(55);
        }

        public static bool HasIndestructible(this Entity e)
        {
            return e.HasComponent(56);
        }

        public static bool HasInstanceToEntityLookup(this Entity e)
        {
            return e.HasComponent(57);
        }

        public static bool HasInteractOnCollision(this Entity e)
        {
            return e.HasComponent(58);
        }

        public static bool HasInteractOnRuleMatchCollection(this Entity e)
        {
            return e.HasComponent(59);
        }

        public static bool HasInteractOnRuleMatch(this Entity e)
        {
            return e.HasComponent(60);
        }

        public static bool HasInteractOnStart(this Entity e)
        {
            return e.HasComponent(61);
        }

        public static bool HasInteractor(this Entity e)
        {
            return e.HasComponent(62);
        }

        public static bool HasLine(this Entity e)
        {
            return e.HasComponent(63);
        }

        public static bool HasMap(this Entity e)
        {
            return e.HasComponent(64);
        }

        public static bool HasMoveTo(this Entity e)
        {
            return e.HasComponent(65);
        }

        public static bool HasMoveToPerfect(this Entity e)
        {
            return e.HasComponent(66);
        }

        public static bool HasMusic(this Entity e)
        {
            return e.HasComponent(67);
        }

        public static bool HasNineSlice(this Entity e)
        {
            return e.HasComponent(68);
        }

        public static bool HasOnEnterOnExit(this Entity e)
        {
            return e.HasComponent(69);
        }

        public static bool HasParallax(this Entity e)
        {
            return e.HasComponent(70);
        }

        public static bool HasParticleSystem(this Entity e)
        {
            return e.HasComponent(71);
        }

        public static bool HasParticleSystemWorldTracker(this Entity e)
        {
            return e.HasComponent(72);
        }

        public static bool HasPathfind(this Entity e)
        {
            return e.HasComponent(73);
        }

        public static bool HasPauseAnimation(this Entity e)
        {
            return e.HasComponent(74);
        }

        public static bool HasPickEntityToAddOnStart(this Entity e)
        {
            return e.HasComponent(75);
        }

        public static bool HasPolygonSprite(this Entity e)
        {
            return e.HasComponent(76);
        }

        public static bool HasPrefabRef(this Entity e)
        {
            return e.HasComponent(77);
        }

        public static bool HasPushAway(this Entity e)
        {
            return e.HasComponent(78);
        }

        public static bool HasQuadtree(this Entity e)
        {
            return e.HasComponent(79);
        }

        public static bool HasQuestTracker(this Entity e)
        {
            return e.HasComponent(80);
        }

        public static bool HasQuestTrackerRuntime(this Entity e)
        {
            return e.HasComponent(81);
        }

        public static bool HasRandomizeSprite(this Entity e)
        {
            return e.HasComponent(82);
        }

        public static bool HasRectPosition(this Entity e)
        {
            return e.HasComponent(83);
        }

        public static bool HasReflection(this Entity e)
        {
            return e.HasComponent(84);
        }

        public static bool HasRemoveColliderWhenStopped(this Entity e)
        {
            return e.HasComponent(85);
        }

        public static bool HasRemoveEntityOnRuleMatchAtLoad(this Entity e)
        {
            return e.HasComponent(86);
        }

        public static bool HasRequiresVision(this Entity e)
        {
            return e.HasComponent(87);
        }

        public static bool HasRoom(this Entity e)
        {
            return e.HasComponent(88);
        }

        public static bool HasRotate(this Entity e)
        {
            return e.HasComponent(89);
        }

        public static bool HasRoute(this Entity e)
        {
            return e.HasComponent(90);
        }

        public static bool HasRuleWatcher(this Entity e)
        {
            return e.HasComponent(91);
        }

        public static bool HasSituation(this Entity e)
        {
            return e.HasComponent(92);
        }

        public static bool HasSound(this Entity e)
        {
            return e.HasComponent(93);
        }

        public static bool HasSoundParameter(this Entity e)
        {
            return e.HasComponent(94);
        }

        public static bool HasSoundWatcher(this Entity e)
        {
            return e.HasComponent(95);
        }

        public static bool HasSpeaker(this Entity e)
        {
            return e.HasComponent(96);
        }

        public static bool HasSprite(this Entity e)
        {
            return e.HasComponent(97);
        }

        public static bool HasStatic(this Entity e)
        {
            return e.HasComponent(98);
        }

        public static bool HasStrafing(this Entity e)
        {
            return e.HasComponent(99);
        }

        public static bool HasTextBox(this Entity e)
        {
            return e.HasComponent(100);
        }

        public static bool HasTexture(this Entity e)
        {
            return e.HasComponent(101);
        }

        public static bool HasThreeSlice(this Entity e)
        {
            return e.HasComponent(102);
        }

        public static bool HasTileGrid(this Entity e)
        {
            return e.HasComponent(103);
        }

        public static bool HasTileset(this Entity e)
        {
            return e.HasComponent(104);
        }

        public static bool HasTint(this Entity e)
        {
            return e.HasComponent(105);
        }

        public static bool HasUiDisplay(this Entity e)
        {
            return e.HasComponent(106);
        }

        public static bool HasVelocity(this Entity e)
        {
            return e.HasComponent(107);
        }

        public static bool HasVerticalPosition(this Entity e)
        {
            return e.HasComponent(108);
        }

        public static bool HasWaitForVacancy(this Entity e)
        {
            return e.HasComponent(109);
        }

        public static bool HasWindowRefreshTracker(this Entity e)
        {
            return e.HasComponent(110);
        }

        public static bool HasStateMachine(this Entity e)
        {
            return e.HasComponent(111);
        }

        public static bool HasInteractive(this Entity e)
        {
            return e.HasComponent(112);
        }

        public static bool HasTransform(this Entity e)
        {
            return e.HasComponent(113);
        }

        public static bool HasTransformBase(this Entity e)
        {
            return e.HasComponent(113);
        }
        #endregion
        
        #region Component "TryGet" methods!
        public static AdvancedCollisionComponent? TryGetAdvancedCollision(this Entity e)
        {
            if (!e.HasAdvancedCollision())
            {
                return null;
            }

            return e.GetAdvancedCollision();
        }

        public static AgentComponent? TryGetAgent(this Entity e)
        {
            if (!e.HasAgent())
            {
                return null;
            }

            return e.GetAgent();
        }

        public static AgentImpulseComponent? TryGetAgentImpulse(this Entity e)
        {
            if (!e.HasAgentImpulse())
            {
                return null;
            }

            return e.GetAgentImpulse();
        }

        public static AgentSpeedMultiplier? TryGetAgentSpeedMultiplier(this Entity e)
        {
            if (!e.HasAgentSpeedMultiplier())
            {
                return null;
            }

            return e.GetAgentSpeedMultiplier();
        }

        public static AgentSpeedOverride? TryGetAgentSpeedOverride(this Entity e)
        {
            if (!e.HasAgentSpeedOverride())
            {
                return null;
            }

            return e.GetAgentSpeedOverride();
        }

        public static AgentSpriteComponent? TryGetAgentSprite(this Entity e)
        {
            if (!e.HasAgentSprite())
            {
                return null;
            }

            return e.GetAgentSprite();
        }

        public static AlphaComponent? TryGetAlpha(this Entity e)
        {
            if (!e.HasAlpha())
            {
                return null;
            }

            return e.GetAlpha();
        }

        public static AnimationCompleteComponent? TryGetAnimationComplete(this Entity e)
        {
            if (!e.HasAnimationComplete())
            {
                return null;
            }

            return e.GetAnimationComplete();
        }

        public static AnimationEventBroadcasterComponent? TryGetAnimationEventBroadcaster(this Entity e)
        {
            if (!e.HasAnimationEventBroadcaster())
            {
                return null;
            }

            return e.GetAnimationEventBroadcaster();
        }

        public static AnimationOverloadComponent? TryGetAnimationOverload(this Entity e)
        {
            if (!e.HasAnimationOverload())
            {
                return null;
            }

            return e.GetAnimationOverload();
        }

        public static AnimationSpeedOverload? TryGetAnimationSpeedOverload(this Entity e)
        {
            if (!e.HasAnimationSpeedOverload())
            {
                return null;
            }

            return e.GetAnimationSpeedOverload();
        }

        public static AttackMultiplier? TryGetAttackMultiplier(this Entity e)
        {
            if (!e.HasAttackMultiplier())
            {
                return null;
            }

            return e.GetAttackMultiplier();
        }

        public static CameraFollowComponent? TryGetCameraFollow(this Entity e)
        {
            if (!e.HasCameraFollow())
            {
                return null;
            }

            return e.GetCameraFollow();
        }

        public static CarveComponent? TryGetCarve(this Entity e)
        {
            if (!e.HasCarve())
            {
                return null;
            }

            return e.GetCarve();
        }

        public static ChoiceComponent? TryGetChoice(this Entity e)
        {
            if (!e.HasChoice())
            {
                return null;
            }

            return e.GetChoice();
        }

        public static ColliderComponent? TryGetCollider(this Entity e)
        {
            if (!e.HasCollider())
            {
                return null;
            }

            return e.GetCollider();
        }

        public static CollisionCacheComponent? TryGetCollisionCache(this Entity e)
        {
            if (!e.HasCollisionCache())
            {
                return null;
            }

            return e.GetCollisionCache();
        }

        public static CustomCollisionMask? TryGetCustomCollisionMask(this Entity e)
        {
            if (!e.HasCustomCollisionMask())
            {
                return null;
            }

            return e.GetCustomCollisionMask();
        }

        public static CustomDrawComponent? TryGetCustomDraw(this Entity e)
        {
            if (!e.HasCustomDraw())
            {
                return null;
            }

            return e.GetCustomDraw();
        }

        public static CustomTargetSpriteBatchComponent? TryGetCustomTargetSpriteBatch(this Entity e)
        {
            if (!e.HasCustomTargetSpriteBatch())
            {
                return null;
            }

            return e.GetCustomTargetSpriteBatch();
        }

        public static CutsceneAnchorsComponent? TryGetCutsceneAnchors(this Entity e)
        {
            if (!e.HasCutsceneAnchors())
            {
                return null;
            }

            return e.GetCutsceneAnchors();
        }

        public static CutsceneAnchorsEditorComponent? TryGetCutsceneAnchorsEditor(this Entity e)
        {
            if (!e.HasCutsceneAnchorsEditor())
            {
                return null;
            }

            return e.GetCutsceneAnchorsEditor();
        }

        public static DestroyAtTimeComponent? TryGetDestroyAtTime(this Entity e)
        {
            if (!e.HasDestroyAtTime())
            {
                return null;
            }

            return e.GetDestroyAtTime();
        }

        public static DestroyOnAnimationCompleteComponent? TryGetDestroyOnAnimationComplete(this Entity e)
        {
            if (!e.HasDestroyOnAnimationComplete())
            {
                return null;
            }

            return e.GetDestroyOnAnimationComplete();
        }

        public static DestroyOnBlackboardConditionComponent? TryGetDestroyOnBlackboardCondition(this Entity e)
        {
            if (!e.HasDestroyOnBlackboardCondition())
            {
                return null;
            }

            return e.GetDestroyOnBlackboardCondition();
        }

        public static DestroyOnCollisionComponent? TryGetDestroyOnCollision(this Entity e)
        {
            if (!e.HasDestroyOnCollision())
            {
                return null;
            }

            return e.GetDestroyOnCollision();
        }

        public static DisableAgentComponent? TryGetDisableAgent(this Entity e)
        {
            if (!e.HasDisableAgent())
            {
                return null;
            }

            return e.GetDisableAgent();
        }

        public static DisableEntityComponent? TryGetDisableEntity(this Entity e)
        {
            if (!e.HasDisableEntity())
            {
                return null;
            }

            return e.GetDisableEntity();
        }

        public static DisableParticleSystemComponent? TryGetDisableParticleSystem(this Entity e)
        {
            if (!e.HasDisableParticleSystem())
            {
                return null;
            }

            return e.GetDisableParticleSystem();
        }

        public static DisableSceneTransitionEffectsComponent? TryGetDisableSceneTransitionEffects(this Entity e)
        {
            if (!e.HasDisableSceneTransitionEffects())
            {
                return null;
            }

            return e.GetDisableSceneTransitionEffects();
        }

        public static DoNotPauseComponent? TryGetDoNotPause(this Entity e)
        {
            if (!e.HasDoNotPause())
            {
                return null;
            }

            return e.GetDoNotPause();
        }

        public static DoNotPersistEntityOnSaveComponent? TryGetDoNotPersistEntityOnSave(this Entity e)
        {
            if (!e.HasDoNotPersistEntityOnSave())
            {
                return null;
            }

            return e.GetDoNotPersistEntityOnSave();
        }

        public static DrawRectangleComponent? TryGetDrawRectangle(this Entity e)
        {
            if (!e.HasDrawRectangle())
            {
                return null;
            }

            return e.GetDrawRectangle();
        }

        public static EntityTrackerComponent? TryGetEntityTracker(this Entity e)
        {
            if (!e.HasEntityTracker())
            {
                return null;
            }

            return e.GetEntityTracker();
        }

        public static EventListenerComponent? TryGetEventListener(this Entity e)
        {
            if (!e.HasEventListener())
            {
                return null;
            }

            return e.GetEventListener();
        }

        public static EventListenerEditorComponent? TryGetEventListenerEditor(this Entity e)
        {
            if (!e.HasEventListenerEditor())
            {
                return null;
            }

            return e.GetEventListenerEditor();
        }

        public static FacingComponent? TryGetFacing(this Entity e)
        {
            if (!e.HasFacing())
            {
                return null;
            }

            return e.GetFacing();
        }

        public static FadeScreenComponent? TryGetFadeScreen(this Entity e)
        {
            if (!e.HasFadeScreen())
            {
                return null;
            }

            return e.GetFadeScreen();
        }

        public static FadeTransitionComponent? TryGetFadeTransition(this Entity e)
        {
            if (!e.HasFadeTransition())
            {
                return null;
            }

            return e.GetFadeTransition();
        }

        public static FadeWhenInAreaComponent? TryGetFadeWhenInArea(this Entity e)
        {
            if (!e.HasFadeWhenInArea())
            {
                return null;
            }

            return e.GetFadeWhenInArea();
        }

        public static FadeWhenInCutsceneComponent? TryGetFadeWhenInCutscene(this Entity e)
        {
            if (!e.HasFadeWhenInCutscene())
            {
                return null;
            }

            return e.GetFadeWhenInCutscene();
        }

        public static FlashSpriteComponent? TryGetFlashSprite(this Entity e)
        {
            if (!e.HasFlashSprite())
            {
                return null;
            }

            return e.GetFlashSprite();
        }

        public static FreeMovementComponent? TryGetFreeMovement(this Entity e)
        {
            if (!e.HasFreeMovement())
            {
                return null;
            }

            return e.GetFreeMovement();
        }

        public static FreezeWorldComponent? TryGetFreezeWorld(this Entity e)
        {
            if (!e.HasFreezeWorld())
            {
                return null;
            }

            return e.GetFreezeWorld();
        }

        public static FrictionComponent? TryGetFriction(this Entity e)
        {
            if (!e.HasFriction())
            {
                return null;
            }

            return e.GetFriction();
        }

        public static GlobalShaderComponent? TryGetGlobalShader(this Entity e)
        {
            if (!e.HasGlobalShader())
            {
                return null;
            }

            return e.GetGlobalShader();
        }

        public static GuidToIdTargetCollectionComponent? TryGetGuidToIdTargetCollection(this Entity e)
        {
            if (!e.HasGuidToIdTargetCollection())
            {
                return null;
            }

            return e.GetGuidToIdTargetCollection();
        }

        public static GuidToIdTargetComponent? TryGetGuidToIdTarget(this Entity e)
        {
            if (!e.HasGuidToIdTarget())
            {
                return null;
            }

            return e.GetGuidToIdTarget();
        }

        public static HAAStarPathfindComponent? TryGetHAAStarPathfind(this Entity e)
        {
            if (!e.HasHAAStarPathfind())
            {
                return null;
            }

            return e.GetHAAStarPathfind();
        }

        public static HasVisionComponent? TryGetHasVision(this Entity e)
        {
            if (!e.HasHasVision())
            {
                return null;
            }

            return e.GetHasVision();
        }

        public static HighlightOnChildrenComponent? TryGetHighlightOnChildren(this Entity e)
        {
            if (!e.HasHighlightOnChildren())
            {
                return null;
            }

            return e.GetHighlightOnChildren();
        }

        public static HighlightSpriteComponent? TryGetHighlightSprite(this Entity e)
        {
            if (!e.HasHighlightSprite())
            {
                return null;
            }

            return e.GetHighlightSprite();
        }

        public static IdTargetCollectionComponent? TryGetIdTargetCollection(this Entity e)
        {
            if (!e.HasIdTargetCollection())
            {
                return null;
            }

            return e.GetIdTargetCollection();
        }

        public static IdTargetComponent? TryGetIdTarget(this Entity e)
        {
            if (!e.HasIdTarget())
            {
                return null;
            }

            return e.GetIdTarget();
        }

        public static IgnoreTriggersUntilComponent? TryGetIgnoreTriggersUntil(this Entity e)
        {
            if (!e.HasIgnoreTriggersUntil())
            {
                return null;
            }

            return e.GetIgnoreTriggersUntil();
        }

        public static InCameraComponent? TryGetInCamera(this Entity e)
        {
            if (!e.HasInCamera())
            {
                return null;
            }

            return e.GetInCamera();
        }

        public static IndestructibleComponent? TryGetIndestructible(this Entity e)
        {
            if (!e.HasIndestructible())
            {
                return null;
            }

            return e.GetIndestructible();
        }

        public static InstanceToEntityLookupComponent? TryGetInstanceToEntityLookup(this Entity e)
        {
            if (!e.HasInstanceToEntityLookup())
            {
                return null;
            }

            return e.GetInstanceToEntityLookup();
        }

        public static InteractOnCollisionComponent? TryGetInteractOnCollision(this Entity e)
        {
            if (!e.HasInteractOnCollision())
            {
                return null;
            }

            return e.GetInteractOnCollision();
        }

        public static InteractOnRuleMatchCollectionComponent? TryGetInteractOnRuleMatchCollection(this Entity e)
        {
            if (!e.HasInteractOnRuleMatchCollection())
            {
                return null;
            }

            return e.GetInteractOnRuleMatchCollection();
        }

        public static InteractOnRuleMatchComponent? TryGetInteractOnRuleMatch(this Entity e)
        {
            if (!e.HasInteractOnRuleMatch())
            {
                return null;
            }

            return e.GetInteractOnRuleMatch();
        }

        public static InteractOnStartComponent? TryGetInteractOnStart(this Entity e)
        {
            if (!e.HasInteractOnStart())
            {
                return null;
            }

            return e.GetInteractOnStart();
        }

        public static InteractorComponent? TryGetInteractor(this Entity e)
        {
            if (!e.HasInteractor())
            {
                return null;
            }

            return e.GetInteractor();
        }

        public static LineComponent? TryGetLine(this Entity e)
        {
            if (!e.HasLine())
            {
                return null;
            }

            return e.GetLine();
        }

        public static MapComponent? TryGetMap(this Entity e)
        {
            if (!e.HasMap())
            {
                return null;
            }

            return e.GetMap();
        }

        public static MoveToComponent? TryGetMoveTo(this Entity e)
        {
            if (!e.HasMoveTo())
            {
                return null;
            }

            return e.GetMoveTo();
        }

        public static MoveToPerfectComponent? TryGetMoveToPerfect(this Entity e)
        {
            if (!e.HasMoveToPerfect())
            {
                return null;
            }

            return e.GetMoveToPerfect();
        }

        public static MusicComponent? TryGetMusic(this Entity e)
        {
            if (!e.HasMusic())
            {
                return null;
            }

            return e.GetMusic();
        }

        public static NineSliceComponent? TryGetNineSlice(this Entity e)
        {
            if (!e.HasNineSlice())
            {
                return null;
            }

            return e.GetNineSlice();
        }

        public static OnEnterOnExitComponent? TryGetOnEnterOnExit(this Entity e)
        {
            if (!e.HasOnEnterOnExit())
            {
                return null;
            }

            return e.GetOnEnterOnExit();
        }

        public static ParallaxComponent? TryGetParallax(this Entity e)
        {
            if (!e.HasParallax())
            {
                return null;
            }

            return e.GetParallax();
        }

        public static ParticleSystemComponent? TryGetParticleSystem(this Entity e)
        {
            if (!e.HasParticleSystem())
            {
                return null;
            }

            return e.GetParticleSystem();
        }

        public static ParticleSystemWorldTrackerComponent? TryGetParticleSystemWorldTracker(this Entity e)
        {
            if (!e.HasParticleSystemWorldTracker())
            {
                return null;
            }

            return e.GetParticleSystemWorldTracker();
        }

        public static PathfindComponent? TryGetPathfind(this Entity e)
        {
            if (!e.HasPathfind())
            {
                return null;
            }

            return e.GetPathfind();
        }

        public static PauseAnimationComponent? TryGetPauseAnimation(this Entity e)
        {
            if (!e.HasPauseAnimation())
            {
                return null;
            }

            return e.GetPauseAnimation();
        }

        public static PickEntityToAddOnStartComponent? TryGetPickEntityToAddOnStart(this Entity e)
        {
            if (!e.HasPickEntityToAddOnStart())
            {
                return null;
            }

            return e.GetPickEntityToAddOnStart();
        }

        public static PolygonSpriteComponent? TryGetPolygonSprite(this Entity e)
        {
            if (!e.HasPolygonSprite())
            {
                return null;
            }

            return e.GetPolygonSprite();
        }

        public static PrefabRefComponent? TryGetPrefabRef(this Entity e)
        {
            if (!e.HasPrefabRef())
            {
                return null;
            }

            return e.GetPrefabRef();
        }

        public static PushAwayComponent? TryGetPushAway(this Entity e)
        {
            if (!e.HasPushAway())
            {
                return null;
            }

            return e.GetPushAway();
        }

        public static QuadtreeComponent? TryGetQuadtree(this Entity e)
        {
            if (!e.HasQuadtree())
            {
                return null;
            }

            return e.GetQuadtree();
        }

        public static QuestTrackerComponent? TryGetQuestTracker(this Entity e)
        {
            if (!e.HasQuestTracker())
            {
                return null;
            }

            return e.GetQuestTracker();
        }

        public static QuestTrackerRuntimeComponent? TryGetQuestTrackerRuntime(this Entity e)
        {
            if (!e.HasQuestTrackerRuntime())
            {
                return null;
            }

            return e.GetQuestTrackerRuntime();
        }

        public static RandomizeSpriteComponent? TryGetRandomizeSprite(this Entity e)
        {
            if (!e.HasRandomizeSprite())
            {
                return null;
            }

            return e.GetRandomizeSprite();
        }

        public static RectPositionComponent? TryGetRectPosition(this Entity e)
        {
            if (!e.HasRectPosition())
            {
                return null;
            }

            return e.GetRectPosition();
        }

        public static ReflectionComponent? TryGetReflection(this Entity e)
        {
            if (!e.HasReflection())
            {
                return null;
            }

            return e.GetReflection();
        }

        public static RemoveColliderWhenStoppedComponent? TryGetRemoveColliderWhenStopped(this Entity e)
        {
            if (!e.HasRemoveColliderWhenStopped())
            {
                return null;
            }

            return e.GetRemoveColliderWhenStopped();
        }

        public static RemoveEntityOnRuleMatchAtLoadComponent? TryGetRemoveEntityOnRuleMatchAtLoad(this Entity e)
        {
            if (!e.HasRemoveEntityOnRuleMatchAtLoad())
            {
                return null;
            }

            return e.GetRemoveEntityOnRuleMatchAtLoad();
        }

        public static RequiresVisionComponent? TryGetRequiresVision(this Entity e)
        {
            if (!e.HasRequiresVision())
            {
                return null;
            }

            return e.GetRequiresVision();
        }

        public static RoomComponent? TryGetRoom(this Entity e)
        {
            if (!e.HasRoom())
            {
                return null;
            }

            return e.GetRoom();
        }

        public static RotateComponent? TryGetRotate(this Entity e)
        {
            if (!e.HasRotate())
            {
                return null;
            }

            return e.GetRotate();
        }

        public static RouteComponent? TryGetRoute(this Entity e)
        {
            if (!e.HasRoute())
            {
                return null;
            }

            return e.GetRoute();
        }

        public static RuleWatcherComponent? TryGetRuleWatcher(this Entity e)
        {
            if (!e.HasRuleWatcher())
            {
                return null;
            }

            return e.GetRuleWatcher();
        }

        public static SituationComponent? TryGetSituation(this Entity e)
        {
            if (!e.HasSituation())
            {
                return null;
            }

            return e.GetSituation();
        }

        public static SoundComponent? TryGetSound(this Entity e)
        {
            if (!e.HasSound())
            {
                return null;
            }

            return e.GetSound();
        }

        public static SoundParameterComponent? TryGetSoundParameter(this Entity e)
        {
            if (!e.HasSoundParameter())
            {
                return null;
            }

            return e.GetSoundParameter();
        }

        public static SoundWatcherComponent? TryGetSoundWatcher(this Entity e)
        {
            if (!e.HasSoundWatcher())
            {
                return null;
            }

            return e.GetSoundWatcher();
        }

        public static SpeakerComponent? TryGetSpeaker(this Entity e)
        {
            if (!e.HasSpeaker())
            {
                return null;
            }

            return e.GetSpeaker();
        }

        public static SpriteComponent? TryGetSprite(this Entity e)
        {
            if (!e.HasSprite())
            {
                return null;
            }

            return e.GetSprite();
        }

        public static StaticComponent? TryGetStatic(this Entity e)
        {
            if (!e.HasStatic())
            {
                return null;
            }

            return e.GetStatic();
        }

        public static StrafingComponent? TryGetStrafing(this Entity e)
        {
            if (!e.HasStrafing())
            {
                return null;
            }

            return e.GetStrafing();
        }

        public static TextBoxComponent? TryGetTextBox(this Entity e)
        {
            if (!e.HasTextBox())
            {
                return null;
            }

            return e.GetTextBox();
        }

        public static TextureComponent? TryGetTexture(this Entity e)
        {
            if (!e.HasTexture())
            {
                return null;
            }

            return e.GetTexture();
        }

        public static ThreeSliceComponent? TryGetThreeSlice(this Entity e)
        {
            if (!e.HasThreeSlice())
            {
                return null;
            }

            return e.GetThreeSlice();
        }

        public static TileGridComponent? TryGetTileGrid(this Entity e)
        {
            if (!e.HasTileGrid())
            {
                return null;
            }

            return e.GetTileGrid();
        }

        public static TilesetComponent? TryGetTileset(this Entity e)
        {
            if (!e.HasTileset())
            {
                return null;
            }

            return e.GetTileset();
        }

        public static TintComponent? TryGetTint(this Entity e)
        {
            if (!e.HasTint())
            {
                return null;
            }

            return e.GetTint();
        }

        public static UiDisplayComponent? TryGetUiDisplay(this Entity e)
        {
            if (!e.HasUiDisplay())
            {
                return null;
            }

            return e.GetUiDisplay();
        }

        public static VelocityComponent? TryGetVelocity(this Entity e)
        {
            if (!e.HasVelocity())
            {
                return null;
            }

            return e.GetVelocity();
        }

        public static VerticalPositionComponent? TryGetVerticalPosition(this Entity e)
        {
            if (!e.HasVerticalPosition())
            {
                return null;
            }

            return e.GetVerticalPosition();
        }

        public static WaitForVacancyComponent? TryGetWaitForVacancy(this Entity e)
        {
            if (!e.HasWaitForVacancy())
            {
                return null;
            }

            return e.GetWaitForVacancy();
        }

        public static WindowRefreshTrackerComponent? TryGetWindowRefreshTracker(this Entity e)
        {
            if (!e.HasWindowRefreshTracker())
            {
                return null;
            }

            return e.GetWindowRefreshTracker();
        }

        public static IStateMachineComponent? TryGetStateMachine(this Entity e)
        {
            if (!e.HasStateMachine())
            {
                return null;
            }

            return e.GetStateMachine();
        }

        public static IInteractiveComponent? TryGetInteractive(this Entity e)
        {
            if (!e.HasInteractive())
            {
                return null;
            }

            return e.GetInteractive();
        }

        public static IMurderTransformComponent? TryGetTransform(this Entity e)
        {
            if (!e.HasTransform())
            {
                return null;
            }

            return e.GetTransform();
        }

        public static ITransformComponent? TryGetTransformBase(this Entity e)
        {
            if (!e.HasTransformBase())
            {
                return null;
            }

            return e.GetTransformBase();
        }
        #endregion
        
        #region Component "Set" methods!
        public static void SetAdvancedCollision(this Entity e, AdvancedCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 0);
        }

        public static void SetAdvancedCollision(this Entity e)
        {
            e.AddOrReplaceComponent(new AdvancedCollisionComponent(), 0);
        }

        public static void SetAgent(this Entity e, AgentComponent component)
        {
            e.AddOrReplaceComponent(component, 1);
        }

        public static void SetAgent(this Entity e, System.Single speed, System.Single acceleration, System.Single friction)
        {
            e.AddOrReplaceComponent(new AgentComponent(speed, acceleration, friction), 1);
        }

        public static void SetAgent(this Entity e)
        {
            e.AddOrReplaceComponent(new AgentComponent(), 1);
        }

        public static void SetAgentImpulse(this Entity e, AgentImpulseComponent component)
        {
            e.AddOrReplaceComponent(component, 2);
        }

        public static void SetAgentImpulse(this Entity e, Murder.Core.Geometry.Vector2 impulse)
        {
            e.AddOrReplaceComponent(new AgentImpulseComponent(impulse), 2);
        }

        public static void SetAgentImpulse(this Entity e, Murder.Core.Geometry.Vector2 impulse, Murder.Helpers.Direction direction)
        {
            e.AddOrReplaceComponent(new AgentImpulseComponent(impulse, direction), 2);
        }

        public static void SetAgentImpulse(this Entity e)
        {
            e.AddOrReplaceComponent(new AgentImpulseComponent(), 2);
        }

        public static void SetAgentSpeedMultiplier(this Entity e, AgentSpeedMultiplier component)
        {
            e.AddOrReplaceComponent(component, 3);
        }

        public static void SetAgentSpeedMultiplier(this Entity e)
        {
            e.AddOrReplaceComponent(new AgentSpeedMultiplier(), 3);
        }

        public static void SetAgentSpeedMultiplier(this Entity e, System.Single speedMultiplier)
        {
            e.AddOrReplaceComponent(new AgentSpeedMultiplier(speedMultiplier), 3);
        }

        public static void SetAgentSpeedOverride(this Entity e, AgentSpeedOverride component)
        {
            e.AddOrReplaceComponent(component, 4);
        }

        public static void SetAgentSpeedOverride(this Entity e)
        {
            e.AddOrReplaceComponent(new AgentSpeedOverride(), 4);
        }

        public static void SetAgentSpeedOverride(this Entity e, System.Single maxSpeed, System.Single acceleration)
        {
            e.AddOrReplaceComponent(new AgentSpeedOverride(maxSpeed, acceleration), 4);
        }

        public static void SetAgentSprite(this Entity e, AgentSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 5);
        }

        public static void SetAgentSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new AgentSpriteComponent(), 5);
        }

        public static void SetAlpha(this Entity e, AlphaComponent component)
        {
            e.AddOrReplaceComponent(component, 6);
        }

        public static void SetAlpha(this Entity e)
        {
            e.AddOrReplaceComponent(new AlphaComponent(), 6);
        }

        public static void SetAlpha(this Entity e, System.Single[] sources)
        {
            e.AddOrReplaceComponent(new AlphaComponent(sources), 6);
        }

        public static void SetAlpha(this Entity e, Murder.Components.AlphaSources source, System.Single amount)
        {
            e.AddOrReplaceComponent(new AlphaComponent(source, amount), 6);
        }

        public static void SetAnimationComplete(this Entity e, AnimationCompleteComponent component)
        {
            e.AddOrReplaceComponent(component, 7);
        }

        public static void SetAnimationComplete(this Entity e)
        {
            e.AddOrReplaceComponent(new AnimationCompleteComponent(), 7);
        }

        public static void SetAnimationEventBroadcaster(this Entity e, AnimationEventBroadcasterComponent component)
        {
            e.AddOrReplaceComponent(component, 8);
        }

        public static void SetAnimationEventBroadcaster(this Entity e)
        {
            e.AddOrReplaceComponent(new AnimationEventBroadcasterComponent(), 8);
        }

        public static void SetAnimationEventBroadcaster(this Entity e, System.Collections.Immutable.ImmutableHashSet<System.Int32> broadcastTo)
        {
            e.AddOrReplaceComponent(new AnimationEventBroadcasterComponent(broadcastTo), 8);
        }

        public static void SetAnimationOverload(this Entity e, AnimationOverloadComponent component)
        {
            e.AddOrReplaceComponent(component, 9);
        }

        public static void SetAnimationOverload(this Entity e)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(), 9);
        }

        public static void SetAnimationOverload(this Entity e, System.String animationId, System.Boolean loop, System.Boolean ignoreFacing)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, loop, ignoreFacing), 9);
        }

        public static void SetAnimationOverload(this Entity e, System.String animationId, System.Single duration, System.Boolean loop, System.Boolean ignoreFacing, System.Int32 current, System.Single sortOffset, System.Guid customSprite)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, duration, loop, ignoreFacing, current, sortOffset, customSprite), 9);
        }

        public static void SetAnimationOverload(this Entity e, System.Collections.Immutable.ImmutableArray<System.String> animations, System.Single duration, System.Boolean loop, System.Boolean ignoreFacing, System.Int32 current, System.Single sortOffset, System.Guid customSprite, System.Single start)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animations, duration, loop, ignoreFacing, current, sortOffset, customSprite, start), 9);
        }

        public static void SetAnimationOverload(this Entity e, System.Collections.Immutable.ImmutableArray<System.String> animations, System.Single duration, System.Boolean loop, System.Boolean ignoreFacing, System.Int32 current, System.Single sortOffset, System.Guid customSprite)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animations, duration, loop, ignoreFacing, current, sortOffset, customSprite), 9);
        }

        public static void SetAnimationOverload(this Entity e, System.String animationId, System.Single duration, System.Boolean loop, System.Boolean ignoreFacing)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, duration, loop, ignoreFacing), 9);
        }

        public static void SetAnimationOverload(this Entity e, System.String animationId, System.Guid customSprite, System.Single start, System.Boolean loop, System.Boolean ignoreFacing)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, customSprite, start, loop, ignoreFacing), 9);
        }

        public static void SetAnimationOverload(this Entity e, System.Collections.Immutable.ImmutableArray<System.String> animationId, System.Guid customSprite, System.Single start, System.Boolean loop, System.Boolean ignoreFacing)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, customSprite, start, loop, ignoreFacing), 9);
        }

        public static void SetAnimationSpeedOverload(this Entity e, AnimationSpeedOverload component)
        {
            e.AddOrReplaceComponent(component, 10);
        }

        public static void SetAnimationSpeedOverload(this Entity e, System.Single rate, System.Boolean persist)
        {
            e.AddOrReplaceComponent(new AnimationSpeedOverload(rate, persist), 10);
        }

        public static void SetAnimationSpeedOverload(this Entity e)
        {
            e.AddOrReplaceComponent(new AnimationSpeedOverload(), 10);
        }

        public static void SetAttackMultiplier(this Entity e, AttackMultiplier component)
        {
            e.AddOrReplaceComponent(component, 11);
        }

        public static void SetAttackMultiplier(this Entity e)
        {
            e.AddOrReplaceComponent(new AttackMultiplier(), 11);
        }

        public static void SetAttackMultiplier(this Entity e, System.Single multiplier)
        {
            e.AddOrReplaceComponent(new AttackMultiplier(multiplier), 11);
        }

        public static void SetCameraFollow(this Entity e, CameraFollowComponent component)
        {
            e.AddOrReplaceComponent(component, 12);
        }

        public static void SetCameraFollow(this Entity e)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(), 12);
        }

        public static void SetCameraFollow(this Entity e, System.Boolean enabled)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(enabled), 12);
        }

        public static void SetCameraFollow(this Entity e, System.Boolean enabled, Bang.Entities.Entity secondaryTarget)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(enabled, secondaryTarget), 12);
        }

        public static void SetCameraFollow(this Entity e, System.Boolean enabled, Murder.Components.CameraStyle style)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(enabled, style), 12);
        }

        public static void SetCameraFollow(this Entity e, Murder.Core.Geometry.Point targetPosition)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(targetPosition), 12);
        }

        public static void SetCarve(this Entity e, CarveComponent component)
        {
            e.AddOrReplaceComponent(component, 13);
        }

        public static void SetCarve(this Entity e)
        {
            e.AddOrReplaceComponent(new CarveComponent(), 13);
        }

        public static void SetCarve(this Entity e, System.Boolean blockVision, System.Boolean obstacle, System.Boolean clearPath, System.Int32 weight)
        {
            e.AddOrReplaceComponent(new CarveComponent(blockVision, obstacle, clearPath, weight), 13);
        }

        public static void SetChoice(this Entity e, ChoiceComponent component)
        {
            e.AddOrReplaceComponent(component, 14);
        }

        public static void SetChoice(this Entity e, Murder.Core.Dialogs.ChoiceLine choice)
        {
            e.AddOrReplaceComponent(new ChoiceComponent(choice), 14);
        }

        public static void SetChoice(this Entity e)
        {
            e.AddOrReplaceComponent(new ChoiceComponent(), 14);
        }

        public static void SetCollider(this Entity e, ColliderComponent component)
        {
            e.AddOrReplaceComponent(component, 15);
        }

        public static void SetCollider(this Entity e)
        {
            e.AddOrReplaceComponent(new ColliderComponent(), 15);
        }

        public static void SetCollider(this Entity e, Murder.Core.Geometry.IShape shape, System.Int32 layer, Murder.Core.Graphics.Color color)
        {
            e.AddOrReplaceComponent(new ColliderComponent(shape, layer, color), 15);
        }

        public static void SetCollider(this Entity e, System.Collections.Immutable.ImmutableArray<Murder.Core.Geometry.IShape> shapes, System.Int32 layer, Murder.Core.Graphics.Color color)
        {
            e.AddOrReplaceComponent(new ColliderComponent(shapes, layer, color), 15);
        }

        public static void SetCollisionCache(this Entity e, CollisionCacheComponent component)
        {
            e.AddOrReplaceComponent(component, 16);
        }

        public static void SetCollisionCache(this Entity e, System.Int32 id)
        {
            e.AddOrReplaceComponent(new CollisionCacheComponent(id), 16);
        }

        public static void SetCollisionCache(this Entity e, System.Collections.Immutable.ImmutableHashSet<System.Int32> idList)
        {
            e.AddOrReplaceComponent(new CollisionCacheComponent(idList), 16);
        }

        public static void SetCollisionCache(this Entity e)
        {
            e.AddOrReplaceComponent(new CollisionCacheComponent(), 16);
        }

        public static void SetCustomCollisionMask(this Entity e, CustomCollisionMask component)
        {
            e.AddOrReplaceComponent(component, 17);
        }

        public static void SetCustomCollisionMask(this Entity e)
        {
            e.AddOrReplaceComponent(new CustomCollisionMask(), 17);
        }

        public static void SetCustomCollisionMask(this Entity e, System.Int32 collisionMask)
        {
            e.AddOrReplaceComponent(new CustomCollisionMask(collisionMask), 17);
        }

        public static void SetCustomDraw(this Entity e, CustomDrawComponent component)
        {
            e.AddOrReplaceComponent(component, 18);
        }

        public static void SetCustomDraw(this Entity e, System.Action<Murder.Core.Graphics.RenderContext> draw)
        {
            e.AddOrReplaceComponent(new CustomDrawComponent(draw), 18);
        }

        public static void SetCustomDraw(this Entity e)
        {
            e.AddOrReplaceComponent(new CustomDrawComponent(), 18);
        }

        public static void SetCustomTargetSpriteBatch(this Entity e, CustomTargetSpriteBatchComponent component)
        {
            e.AddOrReplaceComponent(component, 19);
        }

        public static void SetCustomTargetSpriteBatch(this Entity e, Murder.Core.Graphics.TargetSpriteBatches targetBatch)
        {
            e.AddOrReplaceComponent(new CustomTargetSpriteBatchComponent(targetBatch), 19);
        }

        public static void SetCustomTargetSpriteBatch(this Entity e)
        {
            e.AddOrReplaceComponent(new CustomTargetSpriteBatchComponent(), 19);
        }

        public static void SetCutsceneAnchors(this Entity e, CutsceneAnchorsComponent component)
        {
            e.AddOrReplaceComponent(component, 20);
        }

        public static void SetCutsceneAnchors(this Entity e)
        {
            e.AddOrReplaceComponent(new CutsceneAnchorsComponent(), 20);
        }

        public static void SetCutsceneAnchors(this Entity e, System.Collections.Immutable.ImmutableDictionary<System.String, Murder.Core.Cutscenes.Anchor> anchors)
        {
            e.AddOrReplaceComponent(new CutsceneAnchorsComponent(anchors), 20);
        }

        public static void SetCutsceneAnchorsEditor(this Entity e, CutsceneAnchorsEditorComponent component)
        {
            e.AddOrReplaceComponent(component, 21);
        }

        public static void SetCutsceneAnchorsEditor(this Entity e)
        {
            e.AddOrReplaceComponent(new CutsceneAnchorsEditorComponent(), 21);
        }

        public static void SetCutsceneAnchorsEditor(this Entity e, System.Collections.Immutable.ImmutableArray<Murder.Components.Serialization.AnchorId> anchors)
        {
            e.AddOrReplaceComponent(new CutsceneAnchorsEditorComponent(anchors), 21);
        }

        public static void SetDestroyAtTime(this Entity e, DestroyAtTimeComponent component)
        {
            e.AddOrReplaceComponent(component, 22);
        }

        public static void SetDestroyAtTime(this Entity e)
        {
            e.AddOrReplaceComponent(new DestroyAtTimeComponent(), 22);
        }

        public static void SetDestroyAtTime(this Entity e, System.Single timeToDestroy)
        {
            e.AddOrReplaceComponent(new DestroyAtTimeComponent(timeToDestroy), 22);
        }

        public static void SetDestroyAtTime(this Entity e, Murder.Components.RemoveStyle style, System.Single timeToDestroy)
        {
            e.AddOrReplaceComponent(new DestroyAtTimeComponent(style, timeToDestroy), 22);
        }

        public static void SetDestroyOnAnimationComplete(this Entity e, DestroyOnAnimationCompleteComponent component)
        {
            e.AddOrReplaceComponent(component, 23);
        }

        public static void SetDestroyOnAnimationComplete(this Entity e)
        {
            e.AddOrReplaceComponent(new DestroyOnAnimationCompleteComponent(), 23);
        }

        public static void SetDestroyOnAnimationComplete(this Entity e, System.Boolean deactivateOnComplete)
        {
            e.AddOrReplaceComponent(new DestroyOnAnimationCompleteComponent(deactivateOnComplete), 23);
        }

        public static void SetDestroyOnBlackboardCondition(this Entity e, DestroyOnBlackboardConditionComponent component)
        {
            e.AddOrReplaceComponent(component, 24);
        }

        public static void SetDestroyOnBlackboardCondition(this Entity e)
        {
            e.AddOrReplaceComponent(new DestroyOnBlackboardConditionComponent(), 24);
        }

        public static void SetDestroyOnCollision(this Entity e, DestroyOnCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 25);
        }

        public static void SetDestroyOnCollision(this Entity e)
        {
            e.AddOrReplaceComponent(new DestroyOnCollisionComponent(), 25);
        }

        public static void SetDisableAgent(this Entity e, DisableAgentComponent component)
        {
            e.AddOrReplaceComponent(component, 26);
        }

        public static void SetDisableAgent(this Entity e)
        {
            e.AddOrReplaceComponent(new DisableAgentComponent(), 26);
        }

        public static void SetDisableEntity(this Entity e, DisableEntityComponent component)
        {
            e.AddOrReplaceComponent(component, 27);
        }

        public static void SetDisableEntity(this Entity e)
        {
            e.AddOrReplaceComponent(new DisableEntityComponent(), 27);
        }

        public static void SetDisableParticleSystem(this Entity e, DisableParticleSystemComponent component)
        {
            e.AddOrReplaceComponent(component, 28);
        }

        public static void SetDisableParticleSystem(this Entity e)
        {
            e.AddOrReplaceComponent(new DisableParticleSystemComponent(), 28);
        }

        public static void SetDisableSceneTransitionEffects(this Entity e, DisableSceneTransitionEffectsComponent component)
        {
            e.AddOrReplaceComponent(component, 29);
        }

        public static void SetDisableSceneTransitionEffects(this Entity e)
        {
            e.AddOrReplaceComponent(new DisableSceneTransitionEffectsComponent(), 29);
        }

        public static void SetDisableSceneTransitionEffects(this Entity e, Murder.Core.Geometry.Vector2 bounds)
        {
            e.AddOrReplaceComponent(new DisableSceneTransitionEffectsComponent(bounds), 29);
        }

        public static void SetDoNotPause(this Entity e, DoNotPauseComponent component)
        {
            e.AddOrReplaceComponent(component, 30);
        }

        public static void SetDoNotPause(this Entity e)
        {
            e.AddOrReplaceComponent(new DoNotPauseComponent(), 30);
        }

        public static void SetDoNotPersistEntityOnSave(this Entity e, DoNotPersistEntityOnSaveComponent component)
        {
            e.AddOrReplaceComponent(component, 31);
        }

        public static void SetDoNotPersistEntityOnSave(this Entity e)
        {
            e.AddOrReplaceComponent(new DoNotPersistEntityOnSaveComponent(), 31);
        }

        public static void SetDrawRectangle(this Entity e, DrawRectangleComponent component)
        {
            e.AddOrReplaceComponent(component, 32);
        }

        public static void SetDrawRectangle(this Entity e)
        {
            e.AddOrReplaceComponent(new DrawRectangleComponent(), 32);
        }

        public static void SetEntityTracker(this Entity e, EntityTrackerComponent component)
        {
            e.AddOrReplaceComponent(component, 33);
        }

        public static void SetEntityTracker(this Entity e, System.Int32 target)
        {
            e.AddOrReplaceComponent(new EntityTrackerComponent(target), 33);
        }

        public static void SetEntityTracker(this Entity e)
        {
            e.AddOrReplaceComponent(new EntityTrackerComponent(), 33);
        }

        public static void SetEventListener(this Entity e, EventListenerComponent component)
        {
            e.AddOrReplaceComponent(component, 34);
        }

        public static void SetEventListener(this Entity e)
        {
            e.AddOrReplaceComponent(new EventListenerComponent(), 34);
        }

        public static void SetEventListener(this Entity e, System.Collections.Immutable.ImmutableDictionary<System.String, Murder.Components.SpriteEventInfo> events)
        {
            e.AddOrReplaceComponent(new EventListenerComponent(events), 34);
        }

        public static void SetEventListenerEditor(this Entity e, EventListenerEditorComponent component)
        {
            e.AddOrReplaceComponent(component, 35);
        }

        public static void SetEventListenerEditor(this Entity e)
        {
            e.AddOrReplaceComponent(new EventListenerEditorComponent(), 35);
        }

        public static void SetFacing(this Entity e, FacingComponent component)
        {
            e.AddOrReplaceComponent(component, 36);
        }

        public static void SetFacing(this Entity e, Murder.Helpers.Direction direction)
        {
            e.AddOrReplaceComponent(new FacingComponent(direction), 36);
        }

        public static void SetFacing(this Entity e)
        {
            e.AddOrReplaceComponent(new FacingComponent(), 36);
        }

        public static void SetFadeScreen(this Entity e, FadeScreenComponent component)
        {
            e.AddOrReplaceComponent(component, 37);
        }

        public static void SetFadeScreen(this Entity e, Murder.Components.FadeType fade, System.Single startedTime, System.Single duration, Murder.Core.Graphics.Color color, System.Boolean destroyAfterFinished, System.String customTexture)
        {
            e.AddOrReplaceComponent(new FadeScreenComponent(fade, startedTime, duration, color, destroyAfterFinished, customTexture), 37);
        }

        public static void SetFadeScreen(this Entity e)
        {
            e.AddOrReplaceComponent(new FadeScreenComponent(), 37);
        }

        public static void SetFadeTransition(this Entity e, FadeTransitionComponent component)
        {
            e.AddOrReplaceComponent(component, 38);
        }

        public static void SetFadeTransition(this Entity e, System.Single duration, System.Single startAlpha, System.Single targetAlpha)
        {
            e.AddOrReplaceComponent(new FadeTransitionComponent(duration, startAlpha, targetAlpha), 38);
        }

        public static void SetFadeTransition(this Entity e, System.Single duration, System.Single startAlpha, System.Single targetAlpha, System.Boolean destroyOnEnd)
        {
            e.AddOrReplaceComponent(new FadeTransitionComponent(duration, startAlpha, targetAlpha, destroyOnEnd), 38);
        }

        public static void SetFadeTransition(this Entity e)
        {
            e.AddOrReplaceComponent(new FadeTransitionComponent(), 38);
        }

        public static void SetFadeWhenInArea(this Entity e, FadeWhenInAreaComponent component)
        {
            e.AddOrReplaceComponent(component, 39);
        }

        public static void SetFadeWhenInArea(this Entity e)
        {
            e.AddOrReplaceComponent(new FadeWhenInAreaComponent(), 39);
        }

        public static void SetFadeWhenInCutscene(this Entity e, FadeWhenInCutsceneComponent component)
        {
            e.AddOrReplaceComponent(component, 40);
        }

        public static void SetFadeWhenInCutscene(this Entity e)
        {
            e.AddOrReplaceComponent(new FadeWhenInCutsceneComponent(), 40);
        }

        public static void SetFadeWhenInCutscene(this Entity e, System.Single duration, System.Single previousAlpha)
        {
            e.AddOrReplaceComponent(new FadeWhenInCutsceneComponent(duration, previousAlpha), 40);
        }

        public static void SetFlashSprite(this Entity e, FlashSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 41);
        }

        public static void SetFlashSprite(this Entity e, System.Single destroyTimer)
        {
            e.AddOrReplaceComponent(new FlashSpriteComponent(destroyTimer), 41);
        }

        public static void SetFlashSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new FlashSpriteComponent(), 41);
        }

        public static void SetFreeMovement(this Entity e, FreeMovementComponent component)
        {
            e.AddOrReplaceComponent(component, 42);
        }

        public static void SetFreeMovement(this Entity e)
        {
            e.AddOrReplaceComponent(new FreeMovementComponent(), 42);
        }

        public static void SetFreezeWorld(this Entity e, FreezeWorldComponent component)
        {
            e.AddOrReplaceComponent(component, 43);
        }

        public static void SetFreezeWorld(this Entity e)
        {
            e.AddOrReplaceComponent(new FreezeWorldComponent(), 43);
        }

        public static void SetFreezeWorld(this Entity e, System.Int32 count)
        {
            e.AddOrReplaceComponent(new FreezeWorldComponent(count), 43);
        }

        public static void SetFriction(this Entity e, FrictionComponent component)
        {
            e.AddOrReplaceComponent(component, 44);
        }

        public static void SetFriction(this Entity e, System.Single amount)
        {
            e.AddOrReplaceComponent(new FrictionComponent(amount), 44);
        }

        public static void SetFriction(this Entity e)
        {
            e.AddOrReplaceComponent(new FrictionComponent(), 44);
        }

        public static void SetGlobalShader(this Entity e, GlobalShaderComponent component)
        {
            e.AddOrReplaceComponent(component, 45);
        }

        public static void SetGlobalShader(this Entity e)
        {
            e.AddOrReplaceComponent(new GlobalShaderComponent(), 45);
        }

        public static void SetGuidToIdTargetCollection(this Entity e, GuidToIdTargetCollectionComponent component)
        {
            e.AddOrReplaceComponent(component, 46);
        }

        public static void SetGuidToIdTargetCollection(this Entity e)
        {
            e.AddOrReplaceComponent(new GuidToIdTargetCollectionComponent(), 46);
        }

        public static void SetGuidToIdTarget(this Entity e, GuidToIdTargetComponent component)
        {
            e.AddOrReplaceComponent(component, 47);
        }

        public static void SetGuidToIdTarget(this Entity e, System.Guid target)
        {
            e.AddOrReplaceComponent(new GuidToIdTargetComponent(target), 47);
        }

        public static void SetGuidToIdTarget(this Entity e)
        {
            e.AddOrReplaceComponent(new GuidToIdTargetComponent(), 47);
        }

        public static void SetHAAStarPathfind(this Entity e, HAAStarPathfindComponent component)
        {
            e.AddOrReplaceComponent(component, 48);
        }

        public static void SetHAAStarPathfind(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new HAAStarPathfindComponent(width, height), 48);
        }

        public static void SetHAAStarPathfind(this Entity e)
        {
            e.AddOrReplaceComponent(new HAAStarPathfindComponent(), 48);
        }

        public static void SetHasVision(this Entity e, HasVisionComponent component)
        {
            e.AddOrReplaceComponent(component, 49);
        }

        public static void SetHasVision(this Entity e)
        {
            e.AddOrReplaceComponent(new HasVisionComponent(), 49);
        }

        public static void SetHighlightOnChildren(this Entity e, HighlightOnChildrenComponent component)
        {
            e.AddOrReplaceComponent(component, 50);
        }

        public static void SetHighlightOnChildren(this Entity e)
        {
            e.AddOrReplaceComponent(new HighlightOnChildrenComponent(), 50);
        }

        public static void SetHighlightSprite(this Entity e, HighlightSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 51);
        }

        public static void SetHighlightSprite(this Entity e, Murder.Core.Graphics.Color color)
        {
            e.AddOrReplaceComponent(new HighlightSpriteComponent(color), 51);
        }

        public static void SetHighlightSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new HighlightSpriteComponent(), 51);
        }

        public static void SetIdTargetCollection(this Entity e, IdTargetCollectionComponent component)
        {
            e.AddOrReplaceComponent(component, 52);
        }

        public static void SetIdTargetCollection(this Entity e, System.Collections.Immutable.ImmutableDictionary<System.String, System.Int32> targets)
        {
            e.AddOrReplaceComponent(new IdTargetCollectionComponent(targets), 52);
        }

        public static void SetIdTargetCollection(this Entity e)
        {
            e.AddOrReplaceComponent(new IdTargetCollectionComponent(), 52);
        }

        public static void SetIdTarget(this Entity e, IdTargetComponent component)
        {
            e.AddOrReplaceComponent(component, 53);
        }

        public static void SetIdTarget(this Entity e, System.Int32 target)
        {
            e.AddOrReplaceComponent(new IdTargetComponent(target), 53);
        }

        public static void SetIdTarget(this Entity e)
        {
            e.AddOrReplaceComponent(new IdTargetComponent(), 53);
        }

        public static void SetIgnoreTriggersUntil(this Entity e, IgnoreTriggersUntilComponent component)
        {
            e.AddOrReplaceComponent(component, 54);
        }

        public static void SetIgnoreTriggersUntil(this Entity e, System.Single until)
        {
            e.AddOrReplaceComponent(new IgnoreTriggersUntilComponent(until), 54);
        }

        public static void SetIgnoreTriggersUntil(this Entity e)
        {
            e.AddOrReplaceComponent(new IgnoreTriggersUntilComponent(), 54);
        }

        public static void SetInCamera(this Entity e, InCameraComponent component)
        {
            e.AddOrReplaceComponent(component, 55);
        }

        public static void SetInCamera(this Entity e, Murder.Core.Geometry.Vector2 renderPosition)
        {
            e.AddOrReplaceComponent(new InCameraComponent(renderPosition), 55);
        }

        public static void SetInCamera(this Entity e)
        {
            e.AddOrReplaceComponent(new InCameraComponent(), 55);
        }

        public static void SetIndestructible(this Entity e, IndestructibleComponent component)
        {
            e.AddOrReplaceComponent(component, 56);
        }

        public static void SetIndestructible(this Entity e)
        {
            e.AddOrReplaceComponent(new IndestructibleComponent(), 56);
        }

        public static void SetInstanceToEntityLookup(this Entity e, InstanceToEntityLookupComponent component)
        {
            e.AddOrReplaceComponent(component, 57);
        }

        public static void SetInstanceToEntityLookup(this Entity e)
        {
            e.AddOrReplaceComponent(new InstanceToEntityLookupComponent(), 57);
        }

        public static void SetInstanceToEntityLookup(this Entity e, System.Collections.Generic.IDictionary<System.Guid, System.Int32> instancesToEntities)
        {
            e.AddOrReplaceComponent(new InstanceToEntityLookupComponent(instancesToEntities), 57);
        }

        public static void SetInteractOnCollision(this Entity e, InteractOnCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 58);
        }

        public static void SetInteractOnCollision(this Entity e)
        {
            e.AddOrReplaceComponent(new InteractOnCollisionComponent(), 58);
        }

        public static void SetInteractOnCollision(this Entity e, System.Boolean playerOnly)
        {
            e.AddOrReplaceComponent(new InteractOnCollisionComponent(playerOnly), 58);
        }

        public static void SetInteractOnCollision(this Entity e, System.Boolean playerOnly, System.Boolean sendMessageOnExit)
        {
            e.AddOrReplaceComponent(new InteractOnCollisionComponent(playerOnly, sendMessageOnExit), 58);
        }

        public static void SetInteractOnRuleMatchCollection(this Entity e, InteractOnRuleMatchCollectionComponent component)
        {
            e.AddOrReplaceComponent(component, 59);
        }

        public static void SetInteractOnRuleMatchCollection(this Entity e)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchCollectionComponent(), 59);
        }

        public static void SetInteractOnRuleMatchCollection(this Entity e, System.Collections.Immutable.ImmutableArray<Murder.Components.InteractOnRuleMatchComponent> requirements)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchCollectionComponent(requirements), 59);
        }

        public static void SetInteractOnRuleMatch(this Entity e, InteractOnRuleMatchComponent component)
        {
            e.AddOrReplaceComponent(component, 60);
        }

        public static void SetInteractOnRuleMatch(this Entity e)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchComponent(), 60);
        }

        public static void SetInteractOnRuleMatch(this Entity e, Murder.Components.InteractOn interactOn, Murder.Components.AfterInteractRule after, System.Collections.Immutable.ImmutableArray<Murder.Core.Dialogs.CriterionNode> requirements)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchComponent(interactOn, after, requirements), 60);
        }

        public static void SetInteractOnRuleMatch(this Entity e, Murder.Components.AfterInteractRule after, System.Boolean triggered, System.Collections.Immutable.ImmutableArray<Murder.Core.Dialogs.CriterionNode> requirements)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchComponent(after, triggered, requirements), 60);
        }

        public static void SetInteractOnRuleMatch(this Entity e, Murder.Core.Dialogs.CriterionNode[] criteria)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchComponent(criteria), 60);
        }

        public static void SetInteractOnStart(this Entity e, InteractOnStartComponent component)
        {
            e.AddOrReplaceComponent(component, 61);
        }

        public static void SetInteractOnStart(this Entity e)
        {
            e.AddOrReplaceComponent(new InteractOnStartComponent(), 61);
        }

        public static void SetInteractor(this Entity e, InteractorComponent component)
        {
            e.AddOrReplaceComponent(component, 62);
        }

        public static void SetInteractor(this Entity e)
        {
            e.AddOrReplaceComponent(new InteractorComponent(), 62);
        }

        public static void SetLine(this Entity e, LineComponent component)
        {
            e.AddOrReplaceComponent(component, 63);
        }

        public static void SetLine(this Entity e, Murder.Core.Dialogs.Line line, System.Single start)
        {
            e.AddOrReplaceComponent(new LineComponent(line, start), 63);
        }

        public static void SetLine(this Entity e)
        {
            e.AddOrReplaceComponent(new LineComponent(), 63);
        }

        public static void SetMap(this Entity e, MapComponent component)
        {
            e.AddOrReplaceComponent(component, 64);
        }

        public static void SetMap(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new MapComponent(width, height), 64);
        }

        public static void SetMap(this Entity e)
        {
            e.AddOrReplaceComponent(new MapComponent(), 64);
        }

        public static void SetMoveTo(this Entity e, MoveToComponent component)
        {
            e.AddOrReplaceComponent(component, 65);
        }

        public static void SetMoveTo(this Entity e, in Murder.Core.Geometry.Vector2 target)
        {
            e.AddOrReplaceComponent(new MoveToComponent(target), 65);
        }

        public static void SetMoveTo(this Entity e, in Murder.Core.Geometry.Vector2 target, System.Single minDistance, System.Single slowDownDistance)
        {
            e.AddOrReplaceComponent(new MoveToComponent(target, minDistance, slowDownDistance), 65);
        }

        public static void SetMoveTo(this Entity e)
        {
            e.AddOrReplaceComponent(new MoveToComponent(), 65);
        }

        public static void SetMoveToPerfect(this Entity e, MoveToPerfectComponent component)
        {
            e.AddOrReplaceComponent(component, 66);
        }

        public static void SetMoveToPerfect(this Entity e, in Murder.Core.Geometry.Vector2 target, System.Single duration, Murder.Utilities.EaseKind ease)
        {
            e.AddOrReplaceComponent(new MoveToPerfectComponent(target, duration, ease), 66);
        }

        public static void SetMoveToPerfect(this Entity e)
        {
            e.AddOrReplaceComponent(new MoveToPerfectComponent(), 66);
        }

        public static void SetMusic(this Entity e, MusicComponent component)
        {
            e.AddOrReplaceComponent(component, 67);
        }

        public static void SetMusic(this Entity e)
        {
            e.AddOrReplaceComponent(new MusicComponent(), 67);
        }

        public static void SetMusic(this Entity e, Murder.Core.Sounds.SoundEventId id)
        {
            e.AddOrReplaceComponent(new MusicComponent(id), 67);
        }

        public static void SetNineSlice(this Entity e, NineSliceComponent component)
        {
            e.AddOrReplaceComponent(component, 68);
        }

        public static void SetNineSlice(this Entity e)
        {
            e.AddOrReplaceComponent(new NineSliceComponent(), 68);
        }

        public static void SetOnEnterOnExit(this Entity e, OnEnterOnExitComponent component)
        {
            e.AddOrReplaceComponent(component, 69);
        }

        public static void SetOnEnterOnExit(this Entity e)
        {
            e.AddOrReplaceComponent(new OnEnterOnExitComponent(), 69);
        }

        public static void SetOnEnterOnExit(this Entity e, Bang.Interactions.IInteractiveComponent onEnter, Bang.Interactions.IInteractiveComponent onExit)
        {
            e.AddOrReplaceComponent(new OnEnterOnExitComponent(onEnter, onExit), 69);
        }

        public static void SetParallax(this Entity e, ParallaxComponent component)
        {
            e.AddOrReplaceComponent(component, 70);
        }

        public static void SetParallax(this Entity e)
        {
            e.AddOrReplaceComponent(new ParallaxComponent(), 70);
        }

        public static void SetParticleSystem(this Entity e, ParticleSystemComponent component)
        {
            e.AddOrReplaceComponent(component, 71);
        }

        public static void SetParticleSystem(this Entity e, System.Guid asset, System.Boolean destroy)
        {
            e.AddOrReplaceComponent(new ParticleSystemComponent(asset, destroy), 71);
        }

        public static void SetParticleSystem(this Entity e)
        {
            e.AddOrReplaceComponent(new ParticleSystemComponent(), 71);
        }

        public static void SetParticleSystemWorldTracker(this Entity e, ParticleSystemWorldTrackerComponent component)
        {
            e.AddOrReplaceComponent(component, 72);
        }

        public static void SetParticleSystemWorldTracker(this Entity e)
        {
            e.AddOrReplaceComponent(new ParticleSystemWorldTrackerComponent(), 72);
        }

        public static void SetPathfind(this Entity e, PathfindComponent component)
        {
            e.AddOrReplaceComponent(component, 73);
        }

        public static void SetPathfind(this Entity e, in Murder.Core.Geometry.Vector2 target, Murder.Core.Ai.PathfindAlgorithmKind algorithm)
        {
            e.AddOrReplaceComponent(new PathfindComponent(target, algorithm), 73);
        }

        public static void SetPathfind(this Entity e)
        {
            e.AddOrReplaceComponent(new PathfindComponent(), 73);
        }

        public static void SetPauseAnimation(this Entity e, PauseAnimationComponent component)
        {
            e.AddOrReplaceComponent(component, 74);
        }

        public static void SetPauseAnimation(this Entity e)
        {
            e.AddOrReplaceComponent(new PauseAnimationComponent(), 74);
        }

        public static void SetPickEntityToAddOnStart(this Entity e, PickEntityToAddOnStartComponent component)
        {
            e.AddOrReplaceComponent(component, 75);
        }

        public static void SetPickEntityToAddOnStart(this Entity e)
        {
            e.AddOrReplaceComponent(new PickEntityToAddOnStartComponent(), 75);
        }

        public static void SetPolygonSprite(this Entity e, PolygonSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 76);
        }

        public static void SetPolygonSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new PolygonSpriteComponent(), 76);
        }

        public static void SetPrefabRef(this Entity e, PrefabRefComponent component)
        {
            e.AddOrReplaceComponent(component, 77);
        }

        public static void SetPrefabRef(this Entity e, System.Guid assetGui)
        {
            e.AddOrReplaceComponent(new PrefabRefComponent(assetGui), 77);
        }

        public static void SetPrefabRef(this Entity e)
        {
            e.AddOrReplaceComponent(new PrefabRefComponent(), 77);
        }

        public static void SetPushAway(this Entity e, PushAwayComponent component)
        {
            e.AddOrReplaceComponent(component, 78);
        }

        public static void SetPushAway(this Entity e, System.Int32 size, System.Int32 strength)
        {
            e.AddOrReplaceComponent(new PushAwayComponent(size, strength), 78);
        }

        public static void SetPushAway(this Entity e)
        {
            e.AddOrReplaceComponent(new PushAwayComponent(), 78);
        }

        public static void SetQuadtree(this Entity e, QuadtreeComponent component)
        {
            e.AddOrReplaceComponent(component, 79);
        }

        public static void SetQuadtree(this Entity e, Murder.Core.Geometry.Rectangle size)
        {
            e.AddOrReplaceComponent(new QuadtreeComponent(size), 79);
        }

        public static void SetQuadtree(this Entity e)
        {
            e.AddOrReplaceComponent(new QuadtreeComponent(), 79);
        }

        public static void SetQuestTracker(this Entity e, QuestTrackerComponent component)
        {
            e.AddOrReplaceComponent(component, 80);
        }

        public static void SetQuestTracker(this Entity e)
        {
            e.AddOrReplaceComponent(new QuestTrackerComponent(), 80);
        }

        public static void SetQuestTrackerRuntime(this Entity e, QuestTrackerRuntimeComponent component)
        {
            e.AddOrReplaceComponent(component, 81);
        }

        public static void SetQuestTrackerRuntime(this Entity e)
        {
            e.AddOrReplaceComponent(new QuestTrackerRuntimeComponent(), 81);
        }

        public static void SetQuestTrackerRuntime(this Entity e, System.Collections.Immutable.ImmutableArray<Murder.Components.QuestStageRuntime> questStages)
        {
            e.AddOrReplaceComponent(new QuestTrackerRuntimeComponent(questStages), 81);
        }

        public static void SetRandomizeSprite(this Entity e, RandomizeSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 82);
        }

        public static void SetRandomizeSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new RandomizeSpriteComponent(), 82);
        }

        public static void SetRectPosition(this Entity e, RectPositionComponent component)
        {
            e.AddOrReplaceComponent(component, 83);
        }

        public static void SetRectPosition(this Entity e, System.Single top, System.Single left, System.Single bottom, System.Single right, Murder.Core.Geometry.Vector2 size, Murder.Core.Geometry.Vector2 origin, Bang.Components.IComponent parent)
        {
            e.AddOrReplaceComponent(new RectPositionComponent(top, left, bottom, right, size, origin, parent), 83);
        }

        public static void SetRectPosition(this Entity e)
        {
            e.AddOrReplaceComponent(new RectPositionComponent(), 83);
        }

        public static void SetReflection(this Entity e, ReflectionComponent component)
        {
            e.AddOrReplaceComponent(component, 84);
        }

        public static void SetReflection(this Entity e)
        {
            e.AddOrReplaceComponent(new ReflectionComponent(), 84);
        }

        public static void SetRemoveColliderWhenStopped(this Entity e, RemoveColliderWhenStoppedComponent component)
        {
            e.AddOrReplaceComponent(component, 85);
        }

        public static void SetRemoveColliderWhenStopped(this Entity e)
        {
            e.AddOrReplaceComponent(new RemoveColliderWhenStoppedComponent(), 85);
        }

        public static void SetRemoveEntityOnRuleMatchAtLoad(this Entity e, RemoveEntityOnRuleMatchAtLoadComponent component)
        {
            e.AddOrReplaceComponent(component, 86);
        }

        public static void SetRemoveEntityOnRuleMatchAtLoad(this Entity e)
        {
            e.AddOrReplaceComponent(new RemoveEntityOnRuleMatchAtLoadComponent(), 86);
        }

        public static void SetRequiresVision(this Entity e, RequiresVisionComponent component)
        {
            e.AddOrReplaceComponent(component, 87);
        }

        public static void SetRequiresVision(this Entity e)
        {
            e.AddOrReplaceComponent(new RequiresVisionComponent(), 87);
        }

        public static void SetRoom(this Entity e, RoomComponent component)
        {
            e.AddOrReplaceComponent(component, 88);
        }

        public static void SetRoom(this Entity e)
        {
            e.AddOrReplaceComponent(new RoomComponent(), 88);
        }

        public static void SetRoom(this Entity e, System.Guid floor)
        {
            e.AddOrReplaceComponent(new RoomComponent(floor), 88);
        }

        public static void SetRotate(this Entity e, RotateComponent component)
        {
            e.AddOrReplaceComponent(component, 89);
        }

        public static void SetRotate(this Entity e)
        {
            e.AddOrReplaceComponent(new RotateComponent(), 89);
        }

        public static void SetRotate(this Entity e, System.Single rotation)
        {
            e.AddOrReplaceComponent(new RotateComponent(rotation), 89);
        }

        public static void SetRoute(this Entity e, RouteComponent component)
        {
            e.AddOrReplaceComponent(component, 90);
        }

        public static void SetRoute(this Entity e, System.Collections.Immutable.ImmutableDictionary<Murder.Core.Geometry.Point, Murder.Core.Geometry.Point> route, Murder.Core.Geometry.Point initial, Murder.Core.Geometry.Point target)
        {
            e.AddOrReplaceComponent(new RouteComponent(route, initial, target), 90);
        }

        public static void SetRoute(this Entity e)
        {
            e.AddOrReplaceComponent(new RouteComponent(), 90);
        }

        public static void SetRuleWatcher(this Entity e, RuleWatcherComponent component)
        {
            e.AddOrReplaceComponent(component, 91);
        }

        public static void SetRuleWatcher(this Entity e)
        {
            e.AddOrReplaceComponent(new RuleWatcherComponent(), 91);
        }

        public static void SetSituation(this Entity e, SituationComponent component)
        {
            e.AddOrReplaceComponent(component, 92);
        }

        public static void SetSituation(this Entity e)
        {
            e.AddOrReplaceComponent(new SituationComponent(), 92);
        }

        public static void SetSituation(this Entity e, System.Guid character, System.Int32 situation)
        {
            e.AddOrReplaceComponent(new SituationComponent(character, situation), 92);
        }

        public static void SetSound(this Entity e, SoundComponent component)
        {
            e.AddOrReplaceComponent(component, 93);
        }

        public static void SetSound(this Entity e)
        {
            e.AddOrReplaceComponent(new SoundComponent(), 93);
        }

        public static void SetSound(this Entity e, Murder.Core.Sounds.SoundEventId sound, System.Boolean destroyEntity)
        {
            e.AddOrReplaceComponent(new SoundComponent(sound, destroyEntity), 93);
        }

        public static void SetSoundParameter(this Entity e, SoundParameterComponent component)
        {
            e.AddOrReplaceComponent(component, 94);
        }

        public static void SetSoundParameter(this Entity e)
        {
            e.AddOrReplaceComponent(new SoundParameterComponent(), 94);
        }

        public static void SetSoundWatcher(this Entity e, SoundWatcherComponent component)
        {
            e.AddOrReplaceComponent(component, 95);
        }

        public static void SetSoundWatcher(this Entity e)
        {
            e.AddOrReplaceComponent(new SoundWatcherComponent(), 95);
        }

        public static void SetSpeaker(this Entity e, SpeakerComponent component)
        {
            e.AddOrReplaceComponent(component, 96);
        }

        public static void SetSpeaker(this Entity e, System.Guid speaker)
        {
            e.AddOrReplaceComponent(new SpeakerComponent(speaker), 96);
        }

        public static void SetSpeaker(this Entity e)
        {
            e.AddOrReplaceComponent(new SpeakerComponent(), 96);
        }

        public static void SetSprite(this Entity e, SpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 97);
        }

        public static void SetSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new SpriteComponent(), 97);
        }

        public static void SetSprite(this Entity e, Murder.Core.Portrait portrait)
        {
            e.AddOrReplaceComponent(new SpriteComponent(portrait), 97);
        }

        public static void SetSprite(this Entity e, System.Guid guid, Murder.Core.Geometry.Vector2 offset, System.String id, System.Int32 ySortOffset, System.Boolean backAnim, System.Boolean flip, Murder.Core.Graphics.OutlineStyle highlightStyle, System.Single startTime, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new SpriteComponent(guid, offset, id, ySortOffset, backAnim, flip, highlightStyle, startTime, targetSpriteBatch), 97);
        }

        public static void SetSprite(this Entity e, System.Guid guid, Murder.Core.Geometry.Vector2 offset, System.Collections.Immutable.ImmutableArray<System.String> id, System.Int32 ySortOffset, System.Boolean rotate, System.Boolean flip, Murder.Core.Graphics.OutlineStyle highlightStyle, System.Single startTime, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new SpriteComponent(guid, offset, id, ySortOffset, rotate, flip, highlightStyle, startTime, targetSpriteBatch), 97);
        }

        public static void SetStatic(this Entity e, StaticComponent component)
        {
            e.AddOrReplaceComponent(component, 98);
        }

        public static void SetStatic(this Entity e)
        {
            e.AddOrReplaceComponent(new StaticComponent(), 98);
        }

        public static void SetStrafing(this Entity e, StrafingComponent component)
        {
            e.AddOrReplaceComponent(component, 99);
        }

        public static void SetStrafing(this Entity e)
        {
            e.AddOrReplaceComponent(new StrafingComponent(), 99);
        }

        public static void SetTextBox(this Entity e, TextBoxComponent component)
        {
            e.AddOrReplaceComponent(component, 100);
        }

        public static void SetTextBox(this Entity e, System.String text, System.Int32 visibleCharacters, System.Single fontSize, System.Single sorting, Murder.Core.Graphics.Color color, Murder.Core.Geometry.Vector2 offset)
        {
            e.AddOrReplaceComponent(new TextBoxComponent(text, visibleCharacters, fontSize, sorting, color, offset), 100);
        }

        public static void SetTextBox(this Entity e)
        {
            e.AddOrReplaceComponent(new TextBoxComponent(), 100);
        }

        public static void SetTexture(this Entity e, TextureComponent component)
        {
            e.AddOrReplaceComponent(component, 101);
        }

        public static void SetTexture(this Entity e, Microsoft.Xna.Framework.Graphics.Texture2D texture, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new TextureComponent(texture, targetSpriteBatch), 101);
        }

        public static void SetTexture(this Entity e)
        {
            e.AddOrReplaceComponent(new TextureComponent(), 101);
        }

        public static void SetThreeSlice(this Entity e, ThreeSliceComponent component)
        {
            e.AddOrReplaceComponent(component, 102);
        }

        public static void SetThreeSlice(this Entity e)
        {
            e.AddOrReplaceComponent(new ThreeSliceComponent(), 102);
        }

        public static void SetTileGrid(this Entity e, TileGridComponent component)
        {
            e.AddOrReplaceComponent(component, 103);
        }

        public static void SetTileGrid(this Entity e)
        {
            e.AddOrReplaceComponent(new TileGridComponent(), 103);
        }

        public static void SetTileGrid(this Entity e, Murder.Core.TileGrid grid)
        {
            e.AddOrReplaceComponent(new TileGridComponent(grid), 103);
        }

        public static void SetTileGrid(this Entity e, Murder.Core.Geometry.Point origin, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new TileGridComponent(origin, width, height), 103);
        }

        public static void SetTileGrid(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new TileGridComponent(width, height), 103);
        }

        public static void SetTileset(this Entity e, TilesetComponent component)
        {
            e.AddOrReplaceComponent(component, 104);
        }

        public static void SetTileset(this Entity e)
        {
            e.AddOrReplaceComponent(new TilesetComponent(), 104);
        }

        public static void SetTileset(this Entity e, System.Collections.Immutable.ImmutableArray<System.Guid> tilesets)
        {
            e.AddOrReplaceComponent(new TilesetComponent(tilesets), 104);
        }

        public static void SetTint(this Entity e, TintComponent component)
        {
            e.AddOrReplaceComponent(component, 105);
        }

        public static void SetTint(this Entity e, Murder.Core.Graphics.Color TintColor)
        {
            e.AddOrReplaceComponent(new TintComponent(TintColor), 105);
        }

        public static void SetTint(this Entity e)
        {
            e.AddOrReplaceComponent(new TintComponent(), 105);
        }

        public static void SetUiDisplay(this Entity e, UiDisplayComponent component)
        {
            e.AddOrReplaceComponent(component, 106);
        }

        public static void SetUiDisplay(this Entity e)
        {
            e.AddOrReplaceComponent(new UiDisplayComponent(), 106);
        }

        public static void SetVelocity(this Entity e, VelocityComponent component)
        {
            e.AddOrReplaceComponent(component, 107);
        }

        public static void SetVelocity(this Entity e, Murder.Core.Geometry.Vector2 velocity)
        {
            e.AddOrReplaceComponent(new VelocityComponent(velocity), 107);
        }

        public static void SetVelocity(this Entity e, System.Single x, System.Single y)
        {
            e.AddOrReplaceComponent(new VelocityComponent(x, y), 107);
        }

        public static void SetVelocity(this Entity e)
        {
            e.AddOrReplaceComponent(new VelocityComponent(), 107);
        }

        public static void SetVerticalPosition(this Entity e, VerticalPositionComponent component)
        {
            e.AddOrReplaceComponent(component, 108);
        }

        public static void SetVerticalPosition(this Entity e)
        {
            e.AddOrReplaceComponent(new VerticalPositionComponent(), 108);
        }

        public static void SetVerticalPosition(this Entity e, System.Single z, System.Single zVelocity, System.Boolean hasGravity)
        {
            e.AddOrReplaceComponent(new VerticalPositionComponent(z, zVelocity, hasGravity), 108);
        }

        public static void SetWaitForVacancy(this Entity e, WaitForVacancyComponent component)
        {
            e.AddOrReplaceComponent(component, 109);
        }

        public static void SetWaitForVacancy(this Entity e, System.Boolean alertParent)
        {
            e.AddOrReplaceComponent(new WaitForVacancyComponent(alertParent), 109);
        }

        public static void SetWaitForVacancy(this Entity e)
        {
            e.AddOrReplaceComponent(new WaitForVacancyComponent(), 109);
        }

        public static void SetWindowRefreshTracker(this Entity e, WindowRefreshTrackerComponent component)
        {
            e.AddOrReplaceComponent(component, 110);
        }

        public static void SetWindowRefreshTracker(this Entity e)
        {
            e.AddOrReplaceComponent(new WindowRefreshTrackerComponent(), 110);
        }

        public static void SetStateMachine(this Entity e, IStateMachineComponent component)
        {
            e.AddOrReplaceComponent(component, 111);
        }

        public static void SetInteractive(this Entity e, IInteractiveComponent component)
        {
            e.AddOrReplaceComponent(component, 112);
        }

        public static void SetTransform(this Entity e, IMurderTransformComponent component)
        {
            e.AddOrReplaceComponent(component, 113);
        }

        public static void SetTransformBase(this Entity e, ITransformComponent component)
        {
            e.AddOrReplaceComponent(component, 113);
        }
        #endregion
        
        #region Component "Remove" methods!
        public static bool RemoveAdvancedCollision(this Entity e)
        {
            return e.RemoveComponent(0);
        }

        public static bool RemoveAgent(this Entity e)
        {
            return e.RemoveComponent(1);
        }

        public static bool RemoveAgentImpulse(this Entity e)
        {
            return e.RemoveComponent(2);
        }

        public static bool RemoveAgentSpeedMultiplier(this Entity e)
        {
            return e.RemoveComponent(3);
        }

        public static bool RemoveAgentSpeedOverride(this Entity e)
        {
            return e.RemoveComponent(4);
        }

        public static bool RemoveAgentSprite(this Entity e)
        {
            return e.RemoveComponent(5);
        }

        public static bool RemoveAlpha(this Entity e)
        {
            return e.RemoveComponent(6);
        }

        public static bool RemoveAnimationComplete(this Entity e)
        {
            return e.RemoveComponent(7);
        }

        public static bool RemoveAnimationEventBroadcaster(this Entity e)
        {
            return e.RemoveComponent(8);
        }

        public static bool RemoveAnimationOverload(this Entity e)
        {
            return e.RemoveComponent(9);
        }

        public static bool RemoveAnimationSpeedOverload(this Entity e)
        {
            return e.RemoveComponent(10);
        }

        public static bool RemoveAttackMultiplier(this Entity e)
        {
            return e.RemoveComponent(11);
        }

        public static bool RemoveCameraFollow(this Entity e)
        {
            return e.RemoveComponent(12);
        }

        public static bool RemoveCarve(this Entity e)
        {
            return e.RemoveComponent(13);
        }

        public static bool RemoveChoice(this Entity e)
        {
            return e.RemoveComponent(14);
        }

        public static bool RemoveCollider(this Entity e)
        {
            return e.RemoveComponent(15);
        }

        public static bool RemoveCollisionCache(this Entity e)
        {
            return e.RemoveComponent(16);
        }

        public static bool RemoveCustomCollisionMask(this Entity e)
        {
            return e.RemoveComponent(17);
        }

        public static bool RemoveCustomDraw(this Entity e)
        {
            return e.RemoveComponent(18);
        }

        public static bool RemoveCustomTargetSpriteBatch(this Entity e)
        {
            return e.RemoveComponent(19);
        }

        public static bool RemoveCutsceneAnchors(this Entity e)
        {
            return e.RemoveComponent(20);
        }

        public static bool RemoveCutsceneAnchorsEditor(this Entity e)
        {
            return e.RemoveComponent(21);
        }

        public static bool RemoveDestroyAtTime(this Entity e)
        {
            return e.RemoveComponent(22);
        }

        public static bool RemoveDestroyOnAnimationComplete(this Entity e)
        {
            return e.RemoveComponent(23);
        }

        public static bool RemoveDestroyOnBlackboardCondition(this Entity e)
        {
            return e.RemoveComponent(24);
        }

        public static bool RemoveDestroyOnCollision(this Entity e)
        {
            return e.RemoveComponent(25);
        }

        public static bool RemoveDisableAgent(this Entity e)
        {
            return e.RemoveComponent(26);
        }

        public static bool RemoveDisableEntity(this Entity e)
        {
            return e.RemoveComponent(27);
        }

        public static bool RemoveDisableParticleSystem(this Entity e)
        {
            return e.RemoveComponent(28);
        }

        public static bool RemoveDisableSceneTransitionEffects(this Entity e)
        {
            return e.RemoveComponent(29);
        }

        public static bool RemoveDoNotPause(this Entity e)
        {
            return e.RemoveComponent(30);
        }

        public static bool RemoveDoNotPersistEntityOnSave(this Entity e)
        {
            return e.RemoveComponent(31);
        }

        public static bool RemoveDrawRectangle(this Entity e)
        {
            return e.RemoveComponent(32);
        }

        public static bool RemoveEntityTracker(this Entity e)
        {
            return e.RemoveComponent(33);
        }

        public static bool RemoveEventListener(this Entity e)
        {
            return e.RemoveComponent(34);
        }

        public static bool RemoveEventListenerEditor(this Entity e)
        {
            return e.RemoveComponent(35);
        }

        public static bool RemoveFacing(this Entity e)
        {
            return e.RemoveComponent(36);
        }

        public static bool RemoveFadeScreen(this Entity e)
        {
            return e.RemoveComponent(37);
        }

        public static bool RemoveFadeTransition(this Entity e)
        {
            return e.RemoveComponent(38);
        }

        public static bool RemoveFadeWhenInArea(this Entity e)
        {
            return e.RemoveComponent(39);
        }

        public static bool RemoveFadeWhenInCutscene(this Entity e)
        {
            return e.RemoveComponent(40);
        }

        public static bool RemoveFlashSprite(this Entity e)
        {
            return e.RemoveComponent(41);
        }

        public static bool RemoveFreeMovement(this Entity e)
        {
            return e.RemoveComponent(42);
        }

        public static bool RemoveFreezeWorld(this Entity e)
        {
            return e.RemoveComponent(43);
        }

        public static bool RemoveFriction(this Entity e)
        {
            return e.RemoveComponent(44);
        }

        public static bool RemoveGlobalShader(this Entity e)
        {
            return e.RemoveComponent(45);
        }

        public static bool RemoveGuidToIdTargetCollection(this Entity e)
        {
            return e.RemoveComponent(46);
        }

        public static bool RemoveGuidToIdTarget(this Entity e)
        {
            return e.RemoveComponent(47);
        }

        public static bool RemoveHAAStarPathfind(this Entity e)
        {
            return e.RemoveComponent(48);
        }

        public static bool RemoveHasVision(this Entity e)
        {
            return e.RemoveComponent(49);
        }

        public static bool RemoveHighlightOnChildren(this Entity e)
        {
            return e.RemoveComponent(50);
        }

        public static bool RemoveHighlightSprite(this Entity e)
        {
            return e.RemoveComponent(51);
        }

        public static bool RemoveIdTargetCollection(this Entity e)
        {
            return e.RemoveComponent(52);
        }

        public static bool RemoveIdTarget(this Entity e)
        {
            return e.RemoveComponent(53);
        }

        public static bool RemoveIgnoreTriggersUntil(this Entity e)
        {
            return e.RemoveComponent(54);
        }

        public static bool RemoveInCamera(this Entity e)
        {
            return e.RemoveComponent(55);
        }

        public static bool RemoveIndestructible(this Entity e)
        {
            return e.RemoveComponent(56);
        }

        public static bool RemoveInstanceToEntityLookup(this Entity e)
        {
            return e.RemoveComponent(57);
        }

        public static bool RemoveInteractOnCollision(this Entity e)
        {
            return e.RemoveComponent(58);
        }

        public static bool RemoveInteractOnRuleMatchCollection(this Entity e)
        {
            return e.RemoveComponent(59);
        }

        public static bool RemoveInteractOnRuleMatch(this Entity e)
        {
            return e.RemoveComponent(60);
        }

        public static bool RemoveInteractOnStart(this Entity e)
        {
            return e.RemoveComponent(61);
        }

        public static bool RemoveInteractor(this Entity e)
        {
            return e.RemoveComponent(62);
        }

        public static bool RemoveLine(this Entity e)
        {
            return e.RemoveComponent(63);
        }

        public static bool RemoveMap(this Entity e)
        {
            return e.RemoveComponent(64);
        }

        public static bool RemoveMoveTo(this Entity e)
        {
            return e.RemoveComponent(65);
        }

        public static bool RemoveMoveToPerfect(this Entity e)
        {
            return e.RemoveComponent(66);
        }

        public static bool RemoveMusic(this Entity e)
        {
            return e.RemoveComponent(67);
        }

        public static bool RemoveNineSlice(this Entity e)
        {
            return e.RemoveComponent(68);
        }

        public static bool RemoveOnEnterOnExit(this Entity e)
        {
            return e.RemoveComponent(69);
        }

        public static bool RemoveParallax(this Entity e)
        {
            return e.RemoveComponent(70);
        }

        public static bool RemoveParticleSystem(this Entity e)
        {
            return e.RemoveComponent(71);
        }

        public static bool RemoveParticleSystemWorldTracker(this Entity e)
        {
            return e.RemoveComponent(72);
        }

        public static bool RemovePathfind(this Entity e)
        {
            return e.RemoveComponent(73);
        }

        public static bool RemovePauseAnimation(this Entity e)
        {
            return e.RemoveComponent(74);
        }

        public static bool RemovePickEntityToAddOnStart(this Entity e)
        {
            return e.RemoveComponent(75);
        }

        public static bool RemovePolygonSprite(this Entity e)
        {
            return e.RemoveComponent(76);
        }

        public static bool RemovePrefabRef(this Entity e)
        {
            return e.RemoveComponent(77);
        }

        public static bool RemovePushAway(this Entity e)
        {
            return e.RemoveComponent(78);
        }

        public static bool RemoveQuadtree(this Entity e)
        {
            return e.RemoveComponent(79);
        }

        public static bool RemoveQuestTracker(this Entity e)
        {
            return e.RemoveComponent(80);
        }

        public static bool RemoveQuestTrackerRuntime(this Entity e)
        {
            return e.RemoveComponent(81);
        }

        public static bool RemoveRandomizeSprite(this Entity e)
        {
            return e.RemoveComponent(82);
        }

        public static bool RemoveRectPosition(this Entity e)
        {
            return e.RemoveComponent(83);
        }

        public static bool RemoveReflection(this Entity e)
        {
            return e.RemoveComponent(84);
        }

        public static bool RemoveRemoveColliderWhenStopped(this Entity e)
        {
            return e.RemoveComponent(85);
        }

        public static bool RemoveRemoveEntityOnRuleMatchAtLoad(this Entity e)
        {
            return e.RemoveComponent(86);
        }

        public static bool RemoveRequiresVision(this Entity e)
        {
            return e.RemoveComponent(87);
        }

        public static bool RemoveRoom(this Entity e)
        {
            return e.RemoveComponent(88);
        }

        public static bool RemoveRotate(this Entity e)
        {
            return e.RemoveComponent(89);
        }

        public static bool RemoveRoute(this Entity e)
        {
            return e.RemoveComponent(90);
        }

        public static bool RemoveRuleWatcher(this Entity e)
        {
            return e.RemoveComponent(91);
        }

        public static bool RemoveSituation(this Entity e)
        {
            return e.RemoveComponent(92);
        }

        public static bool RemoveSound(this Entity e)
        {
            return e.RemoveComponent(93);
        }

        public static bool RemoveSoundParameter(this Entity e)
        {
            return e.RemoveComponent(94);
        }

        public static bool RemoveSoundWatcher(this Entity e)
        {
            return e.RemoveComponent(95);
        }

        public static bool RemoveSpeaker(this Entity e)
        {
            return e.RemoveComponent(96);
        }

        public static bool RemoveSprite(this Entity e)
        {
            return e.RemoveComponent(97);
        }

        public static bool RemoveStatic(this Entity e)
        {
            return e.RemoveComponent(98);
        }

        public static bool RemoveStrafing(this Entity e)
        {
            return e.RemoveComponent(99);
        }

        public static bool RemoveTextBox(this Entity e)
        {
            return e.RemoveComponent(100);
        }

        public static bool RemoveTexture(this Entity e)
        {
            return e.RemoveComponent(101);
        }

        public static bool RemoveThreeSlice(this Entity e)
        {
            return e.RemoveComponent(102);
        }

        public static bool RemoveTileGrid(this Entity e)
        {
            return e.RemoveComponent(103);
        }

        public static bool RemoveTileset(this Entity e)
        {
            return e.RemoveComponent(104);
        }

        public static bool RemoveTint(this Entity e)
        {
            return e.RemoveComponent(105);
        }

        public static bool RemoveUiDisplay(this Entity e)
        {
            return e.RemoveComponent(106);
        }

        public static bool RemoveVelocity(this Entity e)
        {
            return e.RemoveComponent(107);
        }

        public static bool RemoveVerticalPosition(this Entity e)
        {
            return e.RemoveComponent(108);
        }

        public static bool RemoveWaitForVacancy(this Entity e)
        {
            return e.RemoveComponent(109);
        }

        public static bool RemoveWindowRefreshTracker(this Entity e)
        {
            return e.RemoveComponent(110);
        }

        public static bool RemoveStateMachine(this Entity e)
        {
            return e.RemoveComponent(111);
        }

        public static bool RemoveInteractive(this Entity e)
        {
            return e.RemoveComponent(112);
        }

        public static bool RemoveTransform(this Entity e)
        {
            return e.RemoveComponent(113);
        }

        public static bool RemoveTransformBase(this Entity e)
        {
            return e.RemoveComponent(113);
        }
        #endregion

        #region Message "Has" checkers!
        public static bool HasAnimationCompleteMessage(this Entity e)
        {
            return e.HasMessage(114);
        }

        public static bool HasAnimationEventMessage(this Entity e)
        {
            return e.HasMessage(115);
        }

        public static bool HasCollidedWithMessage(this Entity e)
        {
            return e.HasMessage(116);
        }

        public static bool HasFatalDamageMessage(this Entity e)
        {
            return e.HasMessage(117);
        }

        public static bool HasHighlightMessage(this Entity e)
        {
            return e.HasMessage(118);
        }

        public static bool HasInteractMessage(this Entity e)
        {
            return e.HasMessage(119);
        }

        public static bool HasInteractorMessage(this Entity e)
        {
            return e.HasMessage(120);
        }

        public static bool HasIsInsideOfMessage(this Entity e)
        {
            return e.HasMessage(121);
        }

        public static bool HasNextDialogMessage(this Entity e)
        {
            return e.HasMessage(122);
        }

        public static bool HasOnActorEnteredOrExitedMessage(this Entity e)
        {
            return e.HasMessage(123);
        }

        public static bool HasOnInteractExitMessage(this Entity e)
        {
            return e.HasMessage(124);
        }

        public static bool HasOnTriggerEnteredMessage(this Entity e)
        {
            return e.HasMessage(125);
        }

        public static bool HasPathNotPossibleMessage(this Entity e)
        {
            return e.HasMessage(126);
        }

        public static bool HasPickChoiceMessage(this Entity e)
        {
            return e.HasMessage(127);
        }

        public static bool HasTouchedGroundMessage(this Entity e)
        {
            return e.HasMessage(128);
        }
        #endregion
    }

    public class MurderLookupImplementation : ComponentsLookup
    {
        private static readonly ImmutableHashSet<int> _relativeComponents = new HashSet<int>()
        {
            83,
            113,
            113
        }.ToImmutableHashSet();

        public override ImmutableHashSet<int> RelativeComponents => _relativeComponents;

        private static readonly ImmutableDictionary<Type, int> _componentsIndex = new Dictionary<Type, int>()
        {
            { typeof(AdvancedCollisionComponent), 0 },
            { typeof(AgentComponent), 1 },
            { typeof(AgentImpulseComponent), 2 },
            { typeof(AgentSpeedMultiplier), 3 },
            { typeof(AgentSpeedOverride), 4 },
            { typeof(AgentSpriteComponent), 5 },
            { typeof(AlphaComponent), 6 },
            { typeof(AnimationCompleteComponent), 7 },
            { typeof(AnimationEventBroadcasterComponent), 8 },
            { typeof(AnimationOverloadComponent), 9 },
            { typeof(AnimationSpeedOverload), 10 },
            { typeof(AttackMultiplier), 11 },
            { typeof(CameraFollowComponent), 12 },
            { typeof(CarveComponent), 13 },
            { typeof(ChoiceComponent), 14 },
            { typeof(ColliderComponent), 15 },
            { typeof(CollisionCacheComponent), 16 },
            { typeof(CustomCollisionMask), 17 },
            { typeof(CustomDrawComponent), 18 },
            { typeof(CustomTargetSpriteBatchComponent), 19 },
            { typeof(CutsceneAnchorsComponent), 20 },
            { typeof(CutsceneAnchorsEditorComponent), 21 },
            { typeof(DestroyAtTimeComponent), 22 },
            { typeof(DestroyOnAnimationCompleteComponent), 23 },
            { typeof(DestroyOnBlackboardConditionComponent), 24 },
            { typeof(DestroyOnCollisionComponent), 25 },
            { typeof(DisableAgentComponent), 26 },
            { typeof(DisableEntityComponent), 27 },
            { typeof(DisableParticleSystemComponent), 28 },
            { typeof(DisableSceneTransitionEffectsComponent), 29 },
            { typeof(DoNotPauseComponent), 30 },
            { typeof(DoNotPersistEntityOnSaveComponent), 31 },
            { typeof(DrawRectangleComponent), 32 },
            { typeof(EntityTrackerComponent), 33 },
            { typeof(EventListenerComponent), 34 },
            { typeof(EventListenerEditorComponent), 35 },
            { typeof(FacingComponent), 36 },
            { typeof(FadeScreenComponent), 37 },
            { typeof(FadeTransitionComponent), 38 },
            { typeof(FadeWhenInAreaComponent), 39 },
            { typeof(FadeWhenInCutsceneComponent), 40 },
            { typeof(FlashSpriteComponent), 41 },
            { typeof(FreeMovementComponent), 42 },
            { typeof(FreezeWorldComponent), 43 },
            { typeof(FrictionComponent), 44 },
            { typeof(GlobalShaderComponent), 45 },
            { typeof(GuidToIdTargetCollectionComponent), 46 },
            { typeof(GuidToIdTargetComponent), 47 },
            { typeof(HAAStarPathfindComponent), 48 },
            { typeof(HasVisionComponent), 49 },
            { typeof(HighlightOnChildrenComponent), 50 },
            { typeof(HighlightSpriteComponent), 51 },
            { typeof(IdTargetCollectionComponent), 52 },
            { typeof(IdTargetComponent), 53 },
            { typeof(IgnoreTriggersUntilComponent), 54 },
            { typeof(InCameraComponent), 55 },
            { typeof(IndestructibleComponent), 56 },
            { typeof(InstanceToEntityLookupComponent), 57 },
            { typeof(InteractOnCollisionComponent), 58 },
            { typeof(InteractOnRuleMatchCollectionComponent), 59 },
            { typeof(InteractOnRuleMatchComponent), 60 },
            { typeof(InteractOnStartComponent), 61 },
            { typeof(InteractorComponent), 62 },
            { typeof(LineComponent), 63 },
            { typeof(MapComponent), 64 },
            { typeof(MoveToComponent), 65 },
            { typeof(MoveToPerfectComponent), 66 },
            { typeof(MusicComponent), 67 },
            { typeof(NineSliceComponent), 68 },
            { typeof(OnEnterOnExitComponent), 69 },
            { typeof(ParallaxComponent), 70 },
            { typeof(ParticleSystemComponent), 71 },
            { typeof(ParticleSystemWorldTrackerComponent), 72 },
            { typeof(PathfindComponent), 73 },
            { typeof(PauseAnimationComponent), 74 },
            { typeof(PickEntityToAddOnStartComponent), 75 },
            { typeof(PolygonSpriteComponent), 76 },
            { typeof(PrefabRefComponent), 77 },
            { typeof(PushAwayComponent), 78 },
            { typeof(QuadtreeComponent), 79 },
            { typeof(QuestTrackerComponent), 80 },
            { typeof(QuestTrackerRuntimeComponent), 81 },
            { typeof(RandomizeSpriteComponent), 82 },
            { typeof(RectPositionComponent), 83 },
            { typeof(ReflectionComponent), 84 },
            { typeof(RemoveColliderWhenStoppedComponent), 85 },
            { typeof(RemoveEntityOnRuleMatchAtLoadComponent), 86 },
            { typeof(RequiresVisionComponent), 87 },
            { typeof(RoomComponent), 88 },
            { typeof(RotateComponent), 89 },
            { typeof(RouteComponent), 90 },
            { typeof(RuleWatcherComponent), 91 },
            { typeof(SituationComponent), 92 },
            { typeof(SoundComponent), 93 },
            { typeof(SoundParameterComponent), 94 },
            { typeof(SoundWatcherComponent), 95 },
            { typeof(SpeakerComponent), 96 },
            { typeof(SpriteComponent), 97 },
            { typeof(StaticComponent), 98 },
            { typeof(StrafingComponent), 99 },
            { typeof(TextBoxComponent), 100 },
            { typeof(TextureComponent), 101 },
            { typeof(ThreeSliceComponent), 102 },
            { typeof(TileGridComponent), 103 },
            { typeof(TilesetComponent), 104 },
            { typeof(TintComponent), 105 },
            { typeof(UiDisplayComponent), 106 },
            { typeof(VelocityComponent), 107 },
            { typeof(VerticalPositionComponent), 108 },
            { typeof(WaitForVacancyComponent), 109 },
            { typeof(WindowRefreshTrackerComponent), 110 },
            { typeof(IStateMachineComponent), 111 },
            { typeof(IInteractiveComponent), 112 },
            { typeof(IMurderTransformComponent), 113 },
            { typeof(ITransformComponent), 113 },
            { typeof(StateMachineComponent<Coroutine>), 111 },
            { typeof(StateMachineComponent<DialogStateMachine>), 111 },
            { typeof(InteractiveComponent<AddChildOnInteraction>), 112 },
            { typeof(InteractiveComponent<AddComponentOnInteraction>), 112 },
            { typeof(InteractiveComponent<AddEntityOnInteraction>), 112 },
            { typeof(InteractiveComponent<AdvancedBlackboardInteraction>), 112 },
            { typeof(InteractiveComponent<BlackboardActionInteraction>), 112 },
            { typeof(InteractiveComponent<DebugInteraction>), 112 },
            { typeof(InteractiveComponent<EnableChildrenInteraction>), 112 },
            { typeof(InteractiveComponent<InteractChildOnInteraction>), 112 },
            { typeof(InteractiveComponent<InteractionCollection>), 112 },
            { typeof(InteractiveComponent<PlayMusicInteraction>), 112 },
            { typeof(InteractiveComponent<PlaySoundInteraction>), 112 },
            { typeof(InteractiveComponent<RemoveEntityOnInteraction>), 112 },
            { typeof(InteractiveComponent<SendToOtherInteraction>), 112 },
            { typeof(InteractiveComponent<SendToParentInteraction>), 112 },
            { typeof(InteractiveComponent<SetPositionInteraction>), 112 },
            { typeof(InteractiveComponent<SetSoundOnInteraction>), 112 },
            { typeof(InteractiveComponent<StopMusicInteraction>), 112 },
            { typeof(InteractiveComponent<TalkToInteraction>), 112 },
            { typeof(PositionComponent), 113 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> ComponentsIndex => _componentsIndex;

        private static readonly ImmutableDictionary<Type, int> _messagesIndex = new Dictionary<Type, int>()
        {
            { typeof(AnimationCompleteMessage), 114 },
            { typeof(AnimationEventMessage), 115 },
            { typeof(CollidedWithMessage), 116 },
            { typeof(FatalDamageMessage), 117 },
            { typeof(HighlightMessage), 118 },
            { typeof(InteractMessage), 119 },
            { typeof(InteractorMessage), 120 },
            { typeof(IsInsideOfMessage), 121 },
            { typeof(NextDialogMessage), 122 },
            { typeof(OnActorEnteredOrExitedMessage), 123 },
            { typeof(OnInteractExitMessage), 124 },
            { typeof(OnTriggerEnteredMessage), 125 },
            { typeof(PathNotPossibleMessage), 126 },
            { typeof(PickChoiceMessage), 127 },
            { typeof(TouchedGroundMessage), 128 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> MessagesIndex => _messagesIndex;
    }
}